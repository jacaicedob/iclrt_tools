"""
iclrt_tools.plotting.dfplots
============================

Class for creating various types of plots.

    ImagePlotter
    LMAPlotter
    pickerPlot
    Plot
    RadarPlotter
    RelativeTimePlot
    SyncDF
"""

import matplotlib as mpl
import matplotlib.pyplot as plt
from matplotlib.widgets import SpanSelector, RectangleSelector, LassoSelector
from matplotlib import cm, dates
from matplotlib.gridspec import GridSpec
from mpl_toolkits.mplot3d import Axes3D
import numpy as np
import datetime
import math
import pyart

import iclrt_tools.lma.lma as lma


def plot(x, y, **kwargs):
    """Plot a basic graph using the Plot class."""

    fig = plt.figure()
    ax = fig.add_subplot(111)
    ax.plot(x, y, **kwargs)

    p = Plot(fig, ax)
    p.plot()

    return p


class SpanSelectionException(Exception):
    def __init__(self, message):
        super(SpanSelectionException, self).__init__(message)


class RectangleSelectionException(Exception):
    def __init__(self, message):
        super(RectangleSelectionException, self).__init__(message)


class SyncDf(object):
    """
    class to synchronize dfplots (when you zoom in on one graph, all of
    them do)
    """

    def __init__(self, plotdfs):
        self.plots = plotdfs
        
        for plot in self.plots:
            plot.synced = True
        
    def _onselect(self, xmin, xmax):
        for plot in self.plots:
            plot._onselect(xmin, xmax)
            
    def plot_all(self):
        self.spans = []
        self.cids = []
        
        for plot in self.plots:
            self.spans.append(SpanSelector(plot.ax, self._onselect,
                                           'horizontal', useblit=True,
                                           rectprops=dict(alpha=0.5,
                                                          facecolor='red')))
                    
            self.cids.append(plot.fig.canvas.mpl_connect(
                                         'button_release_event', plot._onclick))
            
            plot.fig.canvas.mpl_connect('key_press_event', plot._onkeypress)


class SpanSelect(object):
    """
    An object to implement horizontal and vertical selection using a
    mpl.widget.SpanSelector.

    Parameters
    ----------
    span: mpl.widget.SpanSelector
        Horizontal SpanSelector.
    span_v: mpl.widget.SpanSelector
        Vertical SpanSelector.

    Attributes
    ----------
    fig: mpl.Figure
        Figure instance.
    ax: mpl.Axes
        Axes instance.
    span: mpl.widget.SpanSelector
        Horizontal SpanSelector.
    span_v: mpl.widget.SpanSelector
        Vertical SpanSelector.

    """

    def __init__(self, span, span_v):
        """ Initialize the object. """

        self.fig = span.ax.figure
        self.ax = span.ax

        self.span = span
        self.span_v = span_v

        self.set_visibility()

    def set_visibility(self, h_vis=True, v_vis=False):
        """
        Set the visibility of the horizontal and vertical selectors.

        Parameters
        ----------
        h_vis: bool
            Boolean representing the visibility of the horizontal selector.
        v_vis: bool
            Boolean representing the visibility of the vertical selector.

        """

        self.span.visible = h_vis
        self.span_v.visible = v_vis

    def on_select(self, xmin, xmax):
        """
        Handle horinzontal SpanSelector events.

        Parameters
        ----------
        xmin: float
            Minimum value of the horizontal selection. Generated by
            SpanSelector.
        xmax: float
            Maximum value of the horizontal selection. Generated by
            SpanSelector.

        Returns
        -------
        x_stack: list
            Old x-axis limits (before zooming).
        y_stack: list
            Old y-axis limits (before zooming).
        x_bounds: list
            New x-axis limits (after zooming).

        Raises
        ------
        SpanSelectionException
            If xmin is equal to xmax.

        """

        if xmin == xmax:
            raise SpanSelectionException("Start and End are the same.")

        # Save the current graph's limits
        xmin_old = self.ax.get_xlim()[0]
        xmax_old = self.ax.get_xlim()[1]

        ymin_old = self.ax.get_ylim()[0]
        ymax_old = self.ax.get_ylim()[1]

        x_stack = [xmin_old, xmax_old]
        y_stack = [ymin_old, ymax_old]
        x_bounds = [xmin, xmax]

        self.ax.set_xlim(x_bounds)
        self.fig.canvas.draw()

        return x_stack, y_stack, x_bounds

    def on_select_v(self, ymin, ymax):
        """
        Handle vertical SpanSelector events.

        Parameters
        ----------
        ymin: float
            Minimum value of the vertical selection. Generated by
            SpanSelector.
        ymax: float
            Maximum value of the vertical selection. Generated by
            SpanSelector.

        Returns
        -------
        x_stack: list
            Old x-axis limits (before zooming).
        y_stack: list
            Old y-axis limits (before zooming).
        y_bounds: list
            New y-axis limits (after zooming).

        Raises
        ------
        SpanSelectionException
            If ymin is equal to ymax.

        """

        if ymin == ymax:
            raise SpanSelectionException("Start and End are the same.")

        # Save the current graph's limits
        xmin_old = self.ax.get_xlim()[0]
        xmax_old = self.ax.get_xlim()[1]

        ymin_old = self.ax.get_ylim()[0]
        ymax_old = self.ax.get_ylim()[1]

        x_stack = [xmin_old, xmax_old]
        y_stack = [ymin_old, ymax_old]
        y_bounds = [ymin, ymax]

        self.ax.set_ylim(y_bounds)
        self.fig.canvas.draw()

        return x_stack, y_stack, y_bounds


class RectangleSelect(object):
    """
    An object to implement rectangular selection using a
    mpl.widget.RectangleSelector.

    Parameters
    ----------
    rect_sel: mpl.widget.RectangleSelector
        Rectangle selector.

    Attributes
    ----------
    fig: mpl.Figure
        Figure instance.
    ax: mpl.Axes
        Axes instance.
    rect_sel: mpl.widget.RectangleSelector
        Rectangle selector.


    """

    def __init__(self, rect_sel):
        """ Initialize the object. """

        self.fig = rect_sel.ax.figure
        self.ax = rect_sel.ax

        self.rect_sel = rect_sel
        self.set_active()

    def set_active(self, active=False):
        """
        Set the state of the rectangular selector.

        Parameters
        ----------
        active: bool
            Boolean to represent the state of the selector.

        """

        self.rect_sel.set_active(active)

    def set_visibility(self, vis=True):
        """
        Set the visibility of the rectangular selector.

        Parameters
        ----------
        vis: bool
            Boolean to represent the visibility of the selector.

        """

        self.rect_sel.visible = vis

    def on_select_rect(self, eclick, erelease):
        """
        Handle RectangleSelector events.

        Parameters
        ----------
        eclick: mpl event
            Mouse click event.

        erelease: mpl event
            Mouse release event.

        Returns
        -------
        x_stack: list
            Old x-axis limits (before zooming).
        y_stack: list
            Old y-axis limits (before zooming).
        x_bounds: list
            New x-axis limits (after zooming).
        y_bounds: list
            New y-axis limits (after zooming).

        """

        x_start = eclick.xdata
        y_start = eclick.ydata

        x_end = erelease.xdata
        y_end = erelease.ydata

        if x_start == x_end or y_start == y_end:
            raise RectangleSelectionException

        xmin_old = self.ax.get_xlim()[0]
        xmax_old = self.ax.get_xlim()[1]

        ymin_old = self.ax.get_ylim()[0]
        ymax_old = self.ax.get_ylim()[1]

        x_stack = [xmin_old, xmax_old]
        y_stack = [ymin_old, ymax_old]

        xmin = np.min([x_start, x_end])
        xmax = np.max([x_start, x_end])

        ymin = np.min([y_start, y_end])
        ymax = np.max([y_start, y_end])

        x_bounds = [xmin, xmax]
        y_bounds = [ymin, ymax]

        self.ax.set_xlim(x_bounds)
        self.ax.set_ylim(y_bounds)
        self.fig.canvas.draw()

        return x_stack, y_stack, x_bounds, y_bounds

class LassoSelect(object):
    """
    An object to implement lasso selection using a
    mpl.widget.LassoSelector.

    Parameters
    ----------
    lasso_sel: mpl.widget.LassoSelector
        Lasso selector.

    Attributes
    ----------
    fig: mpl.Figure
        Figure instance.
    ax: mpl.Axes
        Axes instance.
    lasso_sel: mpl.widget.LassoSelector
        Lasso selector.


    """

    def __init__(self, lasso_sel):
        """ Initialize the object. """

        self.fig = lasso_sel.ax.figure
        self.ax = lasso_sel.ax

        self.lasso_sel = lasso_sel
        self.set_active()

    def set_active(self, active=False):
        """
        Set the state of the rectangular selector.

        Parameters
        ----------
        active: bool
            Boolean to represent the state of the selector.

        """

        self.lasso_sel.set_active(active)

    def set_visibility(self, vis=True):
        """
        Set the visibility of the rectangular selector.

        Parameters
        ----------
        vis: bool
            Boolean to represent the visibility of the selector.

        """

        self.lasso_sel.visible = vis

    def on_select_lasso(self, verts):
        """
        Handle LassoSelector events.

        Parameters
        ----------
        verts: list of tuples
            Vertices of the lines that make up the lasso

        Returns
        -------
        verts: list of tuples
            Vertices of the lines that make up the lasso

        """

        self.verts = verts

        return self.verts


class PointAnnotation(object):
    """
    An object to allow graph annotation with points.

    """
    def __init__(self, ax, marker='x'):
        """ Initialize the object. """

        self.fig = ax.figure
        self.ax = ax
        self.points = []
        self.marker = marker

    def set_marker(self, marker):
        self.marker = marker

    def on_click(self, event):
        """ Handle mpl MouseEvent events. """

        x = event.xdata
        y = event.ydata

        self.points.append([x, y])
        self.ax.scatter(x, y, marker=self.marker, c='r', zorder=10,
                        label='Selection')
        self.fig.canvas.draw()


class LineAnnotation(object):
    """
    An object to allow graph annotation with a line.

    """
    def __init__(self, ax):
        """ Initialize object. """

        self.fig = ax.figure
        self.ax = ax
        self.points = []

        self.line, = self.ax.plot([0], [0], 'orange')
        self.scat = self.ax.scatter([0], [0], c='orange', marker='D')
        self._reset_plot()

    def on_click(self, event):
        """ Handle mpl MouseEvent button_press events. """

        if len(self.points) == 0:
            self.points.append((event.xdata, event.ydata))
            self.scat.set_offsets(np.append(self.scat.get_offsets(),
                                            (self.points[0][0],
                                             self.points[0][1])))

        elif len(self.points) == 1:
            self.points.append((event.xdata, event.ydata))
            self.scat.set_offsets(np.append(self.scat.get_offsets(),
                                            (self.points[1][0],
                                             self.points[1][1])))
        else:
            self._reset_plot()
            self.points.append((event.xdata, event.ydata))
            self.scat.set_offsets(np.append(self.scat.get_offsets(),
                                            (self.points[0][0],
                                             self.points[0][1])))

        if len(self.points) == 2:
            self.line.set_data([self.points[0][0], self.points[1][0]],
                               [self.points[0][1], self.points[1][1]])
            self.print_line_info()

        self.fig.canvas.draw()

    def print_line_info(self):
        """ Print the line (y = mx + b) information. """

        pt1 = self.points[0]
        pt2 = self.points[1]
        vertical = False

        try:
            m = (pt2[1] - pt1[1]) / (pt2[0] - pt1[0])

            if m == float('Inf') or m == float('-Inf'):
                vertical = True

        except ZeroDivisionError:
            vertical = True

        if not vertical:
            b = pt1[1] - m * pt1[0]

        if vertical:
            print("x = {0:0.2f}".format(pt1[0]))
        else:
            print("y = {0:0.2f}x + {1:0.2f}".format(m, b))

    def _reset_plot(self):
        """
        Reset the plot by deleting all lines, scatters, and points plotted
        by this instance.

        """

        for line in self.ax.get_lines():
            if line == self.line:
                line.remove()

        self.scat.set_offsets(np.array([]))
        self.points = []
        self.line, = self.ax.plot([0], [0], 'orange')

        self.fig.canvas.draw()


class Plot(object):
    """
    An object for having interacting plotting (zoom, annotation, etc.).

        Parameters
        ----------
        figure: matplotlib.Figure
            Figure instance to plot.
        ax: matplotlib.Axes
            Axis on figure to plot.
        synced: bool
            Boolean to sync multiple Plot instances.
        max_points: float
            Maximum number of points to plot.

        Attributes
        ----------
        fig: matplotlib.Figure
            Figure used to plot.
        ax: matplotlib.Axes
            Axis used to plot.
        max_points: float
            Maximum number of points to plot.
        set_offset: bool
            Zero-offsets the graph.
        lines: list
            List of matplotlib.lines.Line2D that the plot has
        x_stack: list
            Holds the x limits of the previous graphs for zooming.
        y_stack: list
            Holds the y limits of the previous graphs for zooming.
        pt_annotate: PointAnnotation
            Plots and holds the selected points when annotating the graph.
        ln_annotate: LineAnnotation
            Plots and holds the selected points (and the line through them)
            when annotating the graph.
        x_bounds: list
            Holds the x limits of the current graph.
        y_bounds: list
            Holds the y limits of the current graph.
        sel_points: bool
            Flag used to (de)activate point annotation.
        sel_zero: bool
            Flag used to (de)activate setting a zero point.
        draw_line: bool
            Flag used to (de)activate line annotation.
        span: SpanSelect
            Selector widget to zoom in the x,y direction.
        rect_sel: RectangleSelect
            Selector widget to zoom in the x,y directions using a rectangle.


        """

    def __init__(self, fig, ax, synced=False, max_points=1E9):
        """ Initialize the object. """

        self.fig = fig
        self.ax = ax
        self.max_points = max_points
        self.set_offset = False
        self.lines = ax.get_lines()

        for line in self.lines:
            thisx = line.get_xdata()
            thisy = line.get_ydata()

            # Down sample
            ds_rate = int(thisy.shape[0]/self.max_points)

            if ds_rate == 0:
                ds_rate = 1

            thisy = thisy[::ds_rate]
            thisx = thisx[::ds_rate]

            # Set line
            line.set_data(thisx, thisy)

        self.x_stack = []
        self.y_stack = []
        self.points = []  # Holds the points selected using the shortcut 'o'
        self.x_bounds = self.ax.get_xlim()
        self.y_bounds = self.ax.get_ylim()
        self.synced = synced
        self._sel_points = False
        self.sel_zero = False
        self.draw_line = False

        self._reset_mpl_shortcuts()
        self.plot()

    def plot(self):
        """ Plot the graph and setup selectors and events. """

        span = SpanSelector(self.ax, self._on_select,
                            'horizontal', useblit=True,
                            rectprops=dict(alpha=0.2,
                                           facecolor='red'))
        span_v = SpanSelector(self.ax, self._on_select_v,
                              'vertical', useblit=True,
                              rectprops=dict(alpha=0.2,
                                             facecolor='red'))
        self.span = SpanSelect(span, span_v)

        rect_sel = RectangleSelector(self.ax,
                                     self._on_select_rect,
                                     button=[1],
                                     drawtype='box',
                                     rectprops=dict(alpha=0.2,
                                                    facecolor='red',
                                                    edgecolor='red',
                                                    linewidth=2))
        self.rect_sel = RectangleSelect(rect_sel)

        self.pt_annotate = PointAnnotation(self.ax)
        self.ln_annotate = LineAnnotation(self.ax)

        self.fig.canvas.mpl_connect('button_release_event',
                                    self._on_click)
        self.fig.canvas.mpl_connect('key_press_event', self._on_keypress)
        self.fig.canvas.mpl_connect('key_release_event',
                                    self._on_keyrelease)

    def _reset_mpl_shortcuts(self):
        """ Set all keyboard shortcuts to None. """

        # Set all matplotlib keyboard shortcuts to none
        mpl.rcParams['keymap.fullscreen'] = ''  # f
        mpl.rcParams['keymap.home'] = ''  # h, r, home
        mpl.rcParams['keymap.back'] = ''  # left, c, backspace
        mpl.rcParams['keymap.forward'] = ''  # right, v
        # mpl.rcParams['keymap.pan'] = ''  # p
        mpl.rcParams['keymap.zoom'] = ''  # o
        # mpl.rcParams['keymap.save'] = ''  # s
        # mpl.rcParams['keymap.quit'] = ''  # ctrl+w, cmd+w
        mpl.rcParams['keymap.grid'] = ''  # g
        mpl.rcParams['keymap.yscale'] = ''  # l
        mpl.rcParams['keymap.xscale'] = ''  # L, k
        mpl.rcParams['keymap.all_axes'] = ''  # a

    def _on_select(self, xmin, xmax):
        """ Handle horinzontal SpanSelector events. """
        try:
            x_stack, y_stack, x_bounds = self.span.on_select(xmin, xmax)
            self.x_stack.append(x_stack)
            self.y_stack.append(y_stack)
            self.x_bounds = x_bounds
        except SpanSelectionException:
            return True

    def _on_select_v(self, ymin, ymax):
        """ Handle vertical SpanSelector events. """

        try:
            x_stack, y_stack, y_bounds = self.span.on_select_v(ymin, ymax)
            self.x_stack.append(x_stack)
            self.y_stack.append(y_stack)
            self.y_bounds = y_bounds
        except SpanSelectionException:
            return True

    def _on_select_rect(self, eclick, erelease):
        """ Handle RectangleSelector events. """

        try:
            x_stack, y_stack, x_bounds, y_bounds = self.rect_sel.on_select_rect(
                                                              eclick, erelease)
            self.x_stack.append(x_stack)
            self.y_stack.append(y_stack)
            self.x_bounds = x_bounds
            self.y_bounds = y_bounds
        except RectangleSelectionException:
            return True

    def _on_click(self, event):
        """ Handle click events (right to go back, and left to annotate). """

        if event.button == 3 and (event.inaxes is self.ax or self.synced):
            # On OSX, event.button == 2 is a right click

            if self.x_stack:
                # Get old limits from stacks
                xlims = self.x_stack.pop()
                xmin = xlims[0]
                xmax = xlims[1]

                ylims = self.y_stack.pop()
                ymin = ylims[0]
                ymax = ylims[1]

                self.x_bounds = [xmin, xmax]
                self.ax.set_xlim(self.x_bounds)

                self.y_bounds = [ymin, ymax]
                self.ax.set_ylim(self.y_bounds)

                self.fig.canvas.draw()

        elif event.button == 1 and (event.inaxes is self.ax):
            if self._sel_points:
                self.pt_annotate.on_click(event)

            elif self.draw_line:
                self.ln_annotate.on_click(event)

            elif self.sel_zero:
                x = event.xdata
                l = self.ax.get_xticks()
                ind = np.searchsorted(l, x)
                l -= l[ind]

                self.ax.set_xticks(l)
                self.fig.canvas.draw()

    def _on_keypress(self, event):
        """
        Handle keypress events.

        Keys
        -----
        'r':
            Resets the limits to the original plot.
        'y':
            Turns on the vertical selector.
        'o':
            Turns on the rectangular selector.
        'a':
            Turns on the point annotation.
        'l':
            Turns on the line annotation
        'z':
            Turns on the set zero.
        ' ':
            Closes the window.
        'Esc':
            Closes the window.

        """

        if event.key == 'r':
            if self.x_stack:
                # Get initial limits from stacks
                xmin = self.x_stack[0][0]
                xmax = self.x_stack[0][1]

                ymin = self.y_stack[0][0]
                ymax = self.y_stack[0][1]

                self.x_stack = []
                self.y_stack = []

                self.x_bounds = [xmin, xmax]
                self.ax.set_xlim(self.x_bounds)

                self.y_bounds = [ymin, ymax]
                self.ax.set_ylim(self.y_bounds)

                self.fig.canvas.draw()

        elif event.key == 'y':
            self.span.set_visibility(False, True)
            self.rect_sel.set_active(False)
            self._sel_points = False
            self.draw_line = False
            self.sel_zero = False

        elif event.key == 'o':
            self.span.set_visibility(False, False)
            self.rect_sel.set_visibility(True)
            self.rect_sel.set_active(True)

        elif event.key == 'a':
            self.span.set_visibility(False, False)
            self.rect_sel.set_active(False)
            self._sel_points = True
            self.draw_line = False
            self.sel_zero = False

        elif event.key == 'l':
            self.span.set_visibility(False, False)
            self.rect_sel.set_active(False)
            self._sel_points = False
            self.draw_line = True
            self.sel_zero = False

        elif event.key == 'z':
            self.span.set_visibility(False, False)
            self.rect_sel.set_active(False)
            self._sel_points = False
            self.draw_line = False
            self.sel_zero = True

        elif event.key == ' ' or event.key == 'escape':
            plt.close(self.fig)

    def _on_keyrelease(self, event):
        """ Handle keyrelease events. """

        if event.key == 'y':
            self.span.set_visibility(True, False)
            self.rect_sel.set_active(False)
            self._sel_points = False
            self.draw_line = False
            self.sel_zero = False

        elif event.key == 'o':
            self.span.set_visibility(True, False)
            self.rect_sel.set_active(False)
            self._sel_points = False
            self.draw_line = False
            self.sel_zero = False

        elif event.key == 'a':
            self.span.set_visibility(True, False)
            self.rect_sel.set_active(False)
            self._sel_points = False
            self.draw_line = False
            self.sel_zero = False

        elif event.key == 'l':
            self.span.set_visibility(True, False)
            self.rect_sel.set_active(False)
            self._sel_points = False
            self.draw_line = False
            self.sel_zero = False

        elif event.key == 'z':
            self.span.set_visibility(True, False)
            self.rect_sel.set_active(False)
            self._sel_points = False
            self.draw_line = False
            self.sel_zero = False


class pickerPlot(Plot):
    """
    A Plot object that enables the picker attribute of lines and sets up the
    environment to enable the movement of lines in the canvas.
    (written by Jaime Caicedo)

    Parameters
    ----------
    fig: matplotlib.Figure
        Figure to hold the plot.
    ax: matplotlib.Axes
            Axis to hold the plot.

    Attributes
    ----------
    move_flag: bool
        Flag used to (de)activate the movement of lines in the plot.
    selected_line: matplotlib.lines.Line2D
        Currently selected line to move in the plot.
    line_width: float
        Width of the currently selected line.
    fix_axis: bool
        Flag used to move the axes along with the line, keeping the line
        'centered' at its original position.

    """
      
    def __init__(self, fig, ax):
        super(pickerPlot, self).__init__(fig, ax)
        self.move_flag = False
        self.selected_line = None

        maxx = 0
        minn = 0

        for line in self.lines:
            line.set_picker(5)  # Activate the picker property of the line

            # Update the min and max values
            if min(line.get_ydata()) < minn:
                minn = min(line.get_ydata())

            if max(line.get_ydata()) > maxx:
                maxx = max(line.get_ydata())

        # Find the largest magnitude (abs value) between the min and max of
        # all the lines and set the room between the top/bottom of the graph
        #  and the canvas lines to be 10% of this largest magnitude
        if abs(maxx) > abs(minn):
            room = 0.1 * abs(maxx)

        else:
            room = 0.1 * abs(minn)

        # Set the y limits so that there is the same space between the
        # top/bottom of the graph and the canvas lines
        self.ax.set_ylim([minn - room, maxx + room])

        # Activate the picker property of the axis
        self.ax.set_picker(5)
        self.fix_axis = False

    def plot(self):
        super(pickerPlot, self).plot()
        self.fig.canvas.mpl_connect('pick_event', self._onpick)
        self.span.visible = False

    def _onpick(self, event):
        if event.artist == self.ax:
            pass

        if event.artist in self.lines and event.mouseevent.button == 1:
            #~ print('Selected')
            self.move_flag = True
            self.selected_line = event.artist
            self.line_width = self.selected_line.get_linewidth()
            self.selected_line.set_linewidth(2*self.line_width)

        else:
            #~ print('De-Selected')
            self.move_flag = False

            if self.selected_line:
                self.selected_line.set_linewidth(self.line_width)
                self.selected_line = None

        self.fig.canvas.draw()
            
    def _on_keypress(self, event):
        line = self.selected_line
        
        if line:
            dt = abs(np.diff(line.get_xdata())[0]/2)
            dy = (np.max(line.get_ydata()) -
                  np.min(line.get_ydata()))/len(line.get_xdata())

            ylims = self.ax.get_ylim()

            if event.key == 'ctrl+left' and self.move_flag:
                # print('Moving left...')
                line.set_xdata(line.get_xdata() - 10*dt)
                
            elif event.key == 'left' and self.move_flag:
                # print('Moving left...')
                line.set_xdata(line.get_xdata() - dt)
                
            elif event.key == 'ctrl+right' and self.move_flag:
                # print('Moving right...')
                line.set_xdata(line.get_xdata() + 10*dt)
                
            elif event.key == 'right' and self.move_flag:
                # print('Moving right...')
                line.set_xdata(line.get_xdata() + dt)
                
            elif event.key == 'up' and self.move_flag:
                # print('Moving up...')
                line.set_ydata(line.get_ydata() + dy)

                if not self.fix_axis:
                    self.ax.set_ylim([ylims[0] + dy, ylims[1] + dy])
            
            elif event.key == 'ctrl+up' and self.move_flag:
                # print('Moving up...')
                line.set_ydata(line.get_ydata() + 10*dy)

                if not self.fix_axis:
                    self.ax.set_ylim([ylims[0] + 10*dy, ylims[1] + 10*dy])
            
            elif event.key == 'alt+up' and self.move_flag:
                # print('Moving up...')
                line.set_ydata(line.get_ydata() + 100*dy)

                if not self.fix_axis:
                    self.ax.set_ylim([ylims[0] + 100*dy, ylims[1] + 100*dy])
                
            elif event.key == 'down' and self.move_flag:
                # print('Moving down...')
                line.set_ydata(line.get_ydata() - dy)

                if not self.fix_axis:
                    self.ax.set_ylim([ylims[0] - dy, ylims[1] - dy])
            
            elif event.key == 'ctrl+down' and self.move_flag:
                # print('Moving down...')
                line.set_ydata(line.get_ydata() - 10*dy)

                if not self.fix_axis:
                    self.ax.set_ylim([ylims[0] - 10*dy, ylims[1] - 10*dy])
            
            elif event.key == 'alt+down' and self.move_flag:
                # print('Moving down...')
                line.set_ydata(line.get_ydata() - 100*dy)

                if not self.fix_axis:
                    self.ax.set_ylim([ylims[0] - 100*dy, ylims[1] - 100*dy])

            self.fig.canvas.draw()

        if event.key == 'x':
            self.span.set_visibility(True, False)
            self.rect_sel.set_active(False)

        elif event.key == 'f':
            self.fix_axis = not self.fix_axis

        else:
            super(pickerPlot, self)._on_keypress(event)

    def _on_keyrelease(self, event):
        if event.key == 'x':
            self.span.set_visibility(False, False)
            self.rect_sel.set_active(False)

        elif event.key == 'y':
            self.span.set_visibility(False, False)
            self.rect_sel.set_active(False)

        elif event.key == 'a':
            self.span.set_visibility(False, False)
            self.rect_sel.set_active(False)

        else:
            super(pickerPlot, self)._on_keyrelease(event)


class RelativeTimePlot(object):
    """
    Plotter to generate graphs with relative time axes (written by Jaime
    Caicedo)
    """

    def __init__(self, x, y, max_points=10000, draw=True):    
        self.delta_t = np.diff(x)[0]
        self.zero_time = (x[-1] - x[0])/2
        self.zero_ind = int(self.zero_time/self.delta_t)
        self.max_points = max_points
        
        self.x = x
        self.y = y
        
        self.x_stack = []
        self.draw = draw
        
        if self.draw:
            self.fig = plt.figure()
            self.fig.suptitle('Please select the time zero (Press down \'n\' '
                              'and left click).')
            self.ax = self.fig.add_subplot(111)
            self.data_line = self.ax.plot(x,y)[0]
            self.zero_line = self.ax.plot([self.zero_time, self.zero_time],
                                          [self.ax.get_ylim()[0],
                                           self.ax.get_ylim()[1]], 'r')[0]
        
            self.y_bounds = [self.ax.get_ylim()[0], self.ax.get_ylim()[1]]
        
            self.set_zero = False
                  
            # Down sample
            ds_rate = int(self.y.shape[0]/self.max_points)
        
            if ds_rate == 0:
                ds_rate = 1
            
            thisy = self.y[::ds_rate]
            thisx = self.x[::ds_rate]
        
            # Set line                    
            self.data_line.set_data(thisx, thisy)
            
        self.x_bounds = [x[0], x[-1]]     
        
    def _onselect(self, xmin, xmax):
        if xmin == xmax:
            return True
            
        # Save the current graph's limits
        xmin_old = self.ax.get_xlim()[0]
        xmax_old = self.ax.get_xlim()[1]
        
        # Get new limits and redraw
        indmin, indmax = np.searchsorted(self.x, (xmin, xmax))
        indmax = min(len(self.x)-1, indmax)
        
        if (indmax - indmin) < 2:
            return True
        
        self.x_stack.append([xmin_old, xmax_old])
        
        thisx = self.x[indmin:indmax]
        self.ax.set_xlim(thisx[0], thisx[-1])
        self.x_bounds = [thisx[0], thisx[-1]]
        
        max_y = -np.inf
        min_y = np.inf
        
        thisy = self.y[indmin:indmax]
            
        # Down sample            
        ds_rate = int(thisy.shape[0]/self.max_points)
        
        if ds_rate == 0:
            ds_rate = 1
            
        thisy = thisy[::ds_rate]
        thisx = thisx[::ds_rate]
        
        # Set line
        self.data_line.set_data(thisx, thisy)
           
        mx_y = thisy.max()
        mn_y = thisy.min()   
                
        if mx_y > max_y:
            max_y = mx_y
        
        if mn_y < min_y:
            min_y = mn_y
        
        
        max_y = max_y + (max_y - min_y)*.1
        min_y = min_y - (max_y - min_y)*.1
        
        self.ax.set_ylim(min_y, max_y)
        
        self.fig.canvas.draw()

    def _onclick(self, event):
        if event.button == 1 and (event.inaxes is self.ax):
            if self.set_zero:
                self.zero_time = event.xdata
                self.zero_ind = int((self.zero_time - self.x[0])/self.delta_t)

                ##redraw
                zero_x = [self.zero_time, self.zero_time]
                self.zero_line.set_data(zero_x, self.y_bounds)
                
                self.fig.canvas.draw()

        if event.button == 3 and (event.inaxes is self.ax):

            if self.x_stack:
                # Get old limits from stacks
                xmin = self.x_stack[-1][0]
                xmax = self.x_stack[-1][1]

                self.x_stack = self.x_stack[:-1]

                # Set new limits and redraw
                indmin, indmax = np.searchsorted(self.x, (xmin, xmax))
                indmax = min(len(self.x)-1, indmax)

                thisx = self.x[indmin:indmax]
                self.ax.set_xlim(thisx[0], thisx[-1])
                self.x_bounds = [thisx[0], thisx[-1]]

                ##set the data y
                thisy = self.y[indmin:indmax]

                # Down sample            
                ds_rate = int(thisy.shape[0]/self.max_points)
        
                if ds_rate == 0:
                    ds_rate = 1
            
                thisy = thisy[::ds_rate]
                thisx = thisx[::ds_rate]
        
                # Set line
                self.data_line.set_data(thisx, thisy)
                ##self.data_line.set_data(thisx, data_y)

                max_y = thisy.max()
                min_y = thisy.min()

                ##set the offset y
                ##offset_y = np.ones(len(thisx))*self.dc_offset
                ##self.offset_line.set_data(thisx, offset_y)

#~                 max_y = max(max_y, self.dc_offset)
#~                 min_y = min(min_y, self.dc_offset)

                ##draw
                self.ax.set_ylim(min_y-0.1*(max_y-min_y),
                                 max_y+0.1*(max_y-min_y))
                self.fig.canvas.draw()
        
        if event.button == 2 and (event.inaxes is self.ax):
            """
            On a Mac, event.button == 2 is a right-click
            """
            if self.x_stack:
                # Get old limits from stacks
                xmin = self.x_stack[-1][0]
                xmax = self.x_stack[-1][1]

                self.x_stack = self.x_stack[:-1]

                # Set new limits and redraw
                indmin, indmax = np.searchsorted(self.x, (xmin, xmax))
                indmax = min(len(self.x)-1, indmax)

                thisx = self.x[indmin:indmax]
                self.ax.set_xlim(thisx[0], thisx[-1])
                self.x_bounds = [thisx[0], thisx[-1]]

                ##set the data y
                thisy = self.y[indmin:indmax]

                # Down sample            
                ds_rate = int(thisy.shape[0]/self.max_points)
        
                if ds_rate == 0:
                    ds_rate = 1
            
                thisy = thisy[::ds_rate]
                thisx = thisx[::ds_rate]
        
                # Set line
                self.data_line.set_data(thisx, thisy)
                
                ##self.data_line.set_data(thisx, data_y)

                max_y = thisy.max()
                min_y = thisy.min()

                ##set the offset y
                ##offset_y = np.ones(len(thisx))*self.dc_offset
                ##self.offset_line.set_data(thisx, offset_y)

              #~   max_y = max(max_y, self.dc_offset)
#~                 min_y = min(min_y, self.dc_offset)

                ##draw
                self.ax.set_ylim(min_y-0.1*(max_y-min_y),
                                 max_y+0.1*(max_y-min_y))
                self.fig.canvas.draw()
    
    def _onkeypress(self,event):
        if event.key == 'n':
            self.set_zero = True
            
        elif event.key == 'r':
            if self.x_stack:
                # Get initial limits from stacks
                xmin = self.x_stack[0][0]
                xmax = self.x_stack[0][1]
            
                self.x_stack = []
            
                # Set new limits and redraw
                indmin, indmax = np.searchsorted(self.x, (xmin, xmax))
                indmax = min(len(self.x)-1, indmax)

                thisx = self.x[indmin:indmax]
                self.ax.set_xlim(thisx[0], thisx[-1])
                self.x_bounds = [thisx[0], thisx[-1]]
                
                max_y = -np.inf
                min_y = np.inf
                
                thisy = self.y[indmin:indmax]
                
                # Down sample            
                ds_rate = int(thisy.shape[0]/self.max_points)
        
                if ds_rate == 0:
                    ds_rate = 1
            
                thisy = thisy[::ds_rate]
                thisx = thisx[::ds_rate]
                
                # Set line
                self.data_line.set_data(thisx, thisy)
           
                mx_y = thisy.max()
                mn_y = thisy.min()   
                
                if mx_y > max_y:
                    max_y = mx_y
        
                if mn_y < min_y:
                    min_y = mn_y
                        
                max_y = max_y + (max_y - min_y)*.1
                min_y = min_y - (max_y - min_y)*.1
                           
                self.ax.set_ylim(min_y, max_y)
                self.fig.canvas.draw()
        
        elif event.key == ' ' or event.key == 'escape':
            plt.close(self.fig)
    
    def _onkeyrelease(self, event):
        if event.key == 'n':
            self.set_zero = False
    
    def relative_plot(self, mult, bounds=None, offset=False):
        delta_t = self.delta_t
        
        if bounds:
            lbound = self.zero_time - bounds[0]
            rbound = self.zero_time + bounds[-1]
        else:
            lbound = self.x_bounds[0]
            rbound = self.x_bounds[-1]

        # t in seconds
        t = np.arange(-self.zero_time+lbound, rbound-self.zero_time, delta_t)
        
        s = self.y[int((lbound - self.x[0])/delta_t):
                   int((rbound - self.x[0])/delta_t)].shape[0]
        
        if t.shape[0] > s:
            t = t[0:s]
        #~ elif s > t.shape[0]:
            #~ s = s[0:t.shape[0]]
                
        fig = plt.figure()
        ax = fig.add_subplot(111)
        
        if offset:
            ax.plot(t*mult, self.y[int((lbound - self.x[0])/delta_t):
                                   int((rbound - self.x[0])/delta_t)] -
                    self.y[self.zero_ind])
        else:
            ax.plot(t*mult, self.y[int((lbound - self.x[0])/delta_t):
                                   int((rbound - self.x[0])/delta_t)])
        
        ax.set_xlim(t[0]*mult, t[-1]*mult)
        
        return fig, ax
    
    def plot(self):
    
        if self.draw:

            self.span = SpanSelector(self.ax, self._onselect, 'horizontal',
                                     useblit=True, rectprops=dict(alpha=0.5,
                                     facecolor='red'))

            self.cid = self.fig.canvas.mpl_connect('button_release_event',
                                                   self._onclick)
        
            self.kp = self.fig.canvas.mpl_connect('key_press_event',
                                                  self._onkeypress)
        
            self.kr = self.fig.canvas.mpl_connect('key_release_event',
                                                  self._onkeyrelease)


class ImagePlotter(object):
    def __init__(self, image_file, camera):
        self.image_file = image_file
        self.camera = camera


class RadarPlotter(object):
    """
    An object to plot interactive radar plots using the PyART module.

    Parameters
    ----------
    file_name: str
        Name of file to plot.
    shift: (float, float), optional
        Distance (x, y) in km from radar to center the plots.

    Attributes
    ----------
    file_name: str
        String containing the radar filename.
    radar: pyart.core.Radar
        Radar object.
    fields: dict
        Dictionary of available fields (radar products) in the file.
    gatefilter: pyart.correct.GateFilter
        GateFilter object used to filter the radar data and that is passed to
        all the plotting functions.
    display: pyart.graph.radardisplay
        Display to plot the radar data.
    shift: tuple
        Tuple containing the shift in km.
    _sel_point: bool
        Flag used to (de)activate the selection of a point in PPI to get the
        RHI at an azimuth angle from the radar.
    _sel_line: bool
        Flag used to (de)activate the selection of a line in the PPI to get the
        RHI scan along that line.

    """

    # ICLRT_shift = (32.238e3, 59.873e3)  # Distance (x,y) in km from KJAX radar
    ICLRT_center = (29.9429917, -82.0332305)  # lat, lon of ICLRT
    ICLRT_azimuth = 208.3  # Azimuth in degrees from KJAX radar

    def __init__(self, file_name, shift=None):
        """ Initialize the object. """

        self.file_name = file_name
        try:
            self.radar = pyart.io.read(self.file_name)
        except TypeError:
            self.radar = pyart.io.read_nexrad_archive(self.file_name)

        self.fields = self.radar.fields.keys()

        # Calculate the (x, y) coordinates of the site with respect to the
        # radar which is located at (0, 0)
        lat = self.ICLRT_center[0]
        lon = self.ICLRT_center[1]
        lat_0 = self.radar.latitude['data']
        lon_0 = self.radar.longitude['data']

        x, y = pyart.core.transforms.geographic_to_cartesian_aeqd(
                                                              lon, lat,
                                                              lon_0, lat_0)

        self.iclrt_x_y = x[0], y[0]

        if shift is not None:
            self.shift = shift
        else:
            # Reverse the sign of x, y so that the shift is applied correctly
            self.shift = -self.iclrt_x_y[0], -self.iclrt_x_y[1]

        if self.shift[0] == 0 and self.shift[1] == 0:
            self._azimuth = 205.0
        else:
            self._azimuth = self._get_azimuth_from_cartesian(0, 0)

        self.display = None
        self.gatefilter = None
        
        self._sel_point = None
        self._sel_line = None
        self._fig_ppi = None
        self._fig_rhi = None
        self._ax_ppi = None
        self._ax_rhi = None
        self._az_line = None
        self._radius = None

    def filter_data(self):
        """ Filter the data to remove noise. """

        self.gatefilter = pyart.correct.GateFilter(self.radar)

        # Remove non-meteorological echoes (CC < 0.7) and estimation
        # artifacts (CC > 1.0)
        self.gatefilter.exclude_outside('cross_correlation_ratio', 0.7, 1.0)

    def setup_display(self):
        """ Initialize the PyART display. """

        self.display = pyart.graph.RadarDisplay(self.radar, self.shift)

    def plot_ppi(self, field='reflectivity', sweep=0, fig=None, ax=None,
                 start_coord=None):
        """
        Plot PPI (wrapper function).

        Parameters
        ----------
        field: str
            Desired field (radar product) to plot.
        sweep: int, optional
            Desired sweep to plot.
        fig: matplotlib.Figure, optional
            Desired figure to use.
        ax: matplotlib.Axes, optional
            Desired axis to use.

        """

        if field in self.fields:
            if sweep <= self.radar.nsweeps:
                if self.display is None:
                    self.setup_display()

                if field == 'reflectivity':
                    vmin = -25
                    vmax = 75
                    label = 'Reflectivity (dBZ)'
                    cmap = pyart.graph.cm.NWSRef
                elif field == 'differential_reflectivity':
                    vmin = -7.9
                    vmax = 7.9
                    label = 'Diff. Reflectivity'
                    cmap = None
                elif field == 'cross_correlation_ratio':
                    vmin = 0.2
                    vmax = 1.05
                    label = 'Cross Corr. Ratio'
                    cmap = None
                elif field == 'differential_phase':
                    vmin = 0
                    vmax = 180
                    label = 'Diff. Phase (degrees)'
                    cmap = None
                else:
                    vmin = None
                    vmax = None
                    label = None
                    cmap = None

                self.display.plot_ppi(field, sweep=sweep, vmin=vmin,
                                      vmax=vmax, fig=fig, ax=ax,
                                      title_flag=False,
                                      colorbar_label=label,
                                      axislabels_flag=False,
                                      cmap=cmap, gatefilter=self.gatefilter)

                # ax = plt.gca()
                # print(start_coord[0]*1e-3, start_coord[1]*1e-3)
                # ax.scatter(start_coord[0]*1e-3,
                #            start_coord[1]*1e-3,
                #            s=50, marker='x', c='k')

    def plot_pseudo_rhi(self, field='reflectivity', azimuth=None,
                        fig=None, ax=None):
        """
        Plot RHI from PPI (wrapper function).

        Parameters
        ----------
        field: str
            Desired field (radar product) to plot.
        azimuth: float, optional
            Desired azimuth from North to calculate and plot RHI.
        fig: matplotlib.Figure, optional
            Desired figure to use.
        ax: matplotlib.Axes, optional
            Desired axis to use.

        """

        if azimuth is None:
            azimuth = self._azimuth

        if field in self.fields:
            if azimuth <= 360:
                if self.display is None:
                    self.setup_display()

                if field == 'reflectivity':
                    vmin = -25
                    vmax = 75
                    label = 'Reflectivity (dBZ)'
                    cmap = pyart.graph.cm.NWSRef
                elif field == 'differential_reflectivity':
                    vmin = -7.9
                    vmax = 7.9
                    label = 'Diff. Reflectivity'
                    cmap = None
                elif field == 'cross_correlation_ratio':
                    vmin = 0.2
                    vmax = 1.05
                    label = 'Cross Corr. Ratio'
                    cmap = None
                elif field == 'differential_phase':
                    vmin = 0
                    vmax = 180
                    label = 'Diff. Phase (degrees)'
                    cmap = None
                else:
                    vmin = None
                    vmax = None
                    label = None
                    cmap = None

                self.display.plot_azimuth_to_rhi(field, azimuth,
                                                 vmin=vmin, vmax=vmax,
                                                 fig=fig, ax=ax,
                                                 title_flag=False,
                                                 colorbar_label=label,
                                                 axislabels_flag=False,
                                                 cmap=cmap,
                                                 gatefilter=self.gatefilter)

    def plot_ppi_rhi(self, field='reflectivity', sweep=0, start_azimuth=None,
                     start_coord=None, fig=None, ax=None):
        """
        Interactively plot pseudo RHI and PPI in separate figures.

        Parameters
        ----------
        field: str
            Desired field (radar product) to plot.
        sweep: int, optional
            Desired sweep to plot.
        fig: matplotlib.Figure, optional
            Desired figure to use.
        ax: matplotlib.Axes, optional
            Desired axis to use.
        start_azimuth: float, optional
            Initial azimuth angle (in degrees) at which to calculate the
            RHI slice.

        """

        if field in self.fields:
            if sweep <= self.radar.nsweeps:
                if self.display is None:
                    self.setup_display()

                if start_azimuth is not None:
                    self._azimuth = start_azimuth

                if start_coord is not None:
                    self._start_coord = start_coord
                    # self._get_azimuth_from_cartesian(start_coord[0], start_coord[1])
                else:
                    self._start_coord = self.iclrt_x_y

                if field == 'reflectivity':
                    vmin = -25
                    vmax = 75
                    label = 'Reflectivity (dBZ)'
                    cmap = pyart.graph.cm.NWSRef
                elif field == 'differential_reflectivity':
                    vmin = -7.9
                    vmax = 7.9
                    label = 'Diff. Reflectivity'
                    cmap = None
                elif field == 'cross_correlation_ratio':
                    vmin = 0.2
                    vmax = 1.05
                    label = 'Cross Corr. Ratio'
                    cmap = None
                elif field == 'differential_phase':
                    vmin = 0
                    vmax = 180
                    label = 'Diff. Phase (degrees)'
                    cmap = None
                else:
                    vmin = None
                    vmax = None
                    label = None
                    cmap = None

                self.display.plot_ppi(field, sweep=sweep, vmin=vmin,
                                      vmax=vmax, fig=fig, ax=ax,
                                      title_flag=False,
                                      colorbar_label=label,
                                      axislabels_flag=False,
                                      cmap=cmap, gatefilter=self.gatefilter)

                self._fig_ppi = plt.gcf()
                self._ax_ppi = plt.gca()

                self._ax_ppi.scatter(self.iclrt_x_y[0]*1e-3,
                                     self.iclrt_x_y[1]*1e-3,
                                     s=50, c='w')
                self._az_line, = self._ax_ppi.plot([0], [0], '--k')
                self._set_azimuth_line_data(self._azimuth)

                origin = (self.shift[0]*1e-3, self.shift[1]*1e-3)
                self._radius = math.sqrt((self._start_coord[0]*1e-3) ** 2 +
                                         (self._start_coord[1]*1e-3) ** 2)

                self._ax_ppi.add_artist(plt.Circle(origin, self._radius,
                                                   linestyle='--',
                                                   color='gray', fill=False))

                for i in range(10):
                    self._ax_ppi.add_artist(plt.Circle(origin,
                                                       self._radius + (i+1)*5,
                                                       linestyle='--',
                                                       color='gray',
                                                       fill=False))
                    self._ax_ppi.add_artist(plt.Circle(origin,
                                                       self._radius - (i+1)*5,
                                                       linestyle='--',
                                                       color='gray',
                                                       fill=False))

                self._ax_ppi.scatter(self._start_coord[0]*1e-3,
                                     self._start_coord[1]*1e-3,
                                     s=50, marker='x', c='k')

                self._fig_ppi.canvas.mpl_connect('button_release_event',
                                                 self._onclick)
                self._fig_ppi.canvas.mpl_connect('key_press_event',
                                                 self._onkeypress)
                self._fig_ppi.canvas.mpl_connect('key_release_event',
                                                 self._onkeyrelease)

                self._fig_rhi, self._ax_rhi = plt.subplots(1, 1)
                self.display.plot_azimuth_to_rhi(field, self._azimuth,
                                                 vmin=vmin, vmax=vmax,
                                                 fig=self._fig_rhi,
                                                 ax=self._ax_rhi,
                                                 title_flag=False,
                                                 colorbar_label=label,
                                                 axislabels_flag=False,
                                                 cmap=cmap,
                                                 gatefilter=self.gatefilter)

                try:
                    z = self._start_coord[2] / 1e3
                    self._ax_rhi.scatter(self._radius, z, s=50, marker='x',
                                         c='k')
                except:
                    pass

                self._ax_rhi.plot([self._radius, self._radius],
                                  [self._ax_rhi.get_ylim()[0],
                                  self._ax_rhi.get_ylim()[-1]],
                                  ls='--', c='grey')

                self._ax_rhi.plot([self._radius + 5, self._radius + 5],
                                  [self._ax_rhi.get_ylim()[0],
                                  self._ax_rhi.get_ylim()[-1]],
                                  ls='--', c='grey')

                self._ax_rhi.plot([self._radius - 5, self._radius - 5],
                                  [self._ax_rhi.get_ylim()[0],
                                  self._ax_rhi.get_ylim()[-1]],
                                  ls='--', c='grey')

                self.field = field
                self._sel_point = False

    def _set_azimuth_line_data(self, azimuth, rho=200):
        """
        Set the data for self._az_line when plotting RHI scans along with PPI.

        Parameters
        ----------
        azimuth: float
            The azimuth (in degrees) from North of the radar.
        rho: float, optional
            Length of the line in km

        """

        x0 = self.shift[0]*1e-3
        y0 = self.shift[1]*1e-3

        if azimuth < 180:
            x1 = rho * math.cos(math.radians(90 - azimuth))
            y1 = rho * math.sin(math.radians(90 - azimuth))

        else:  # azimuth < 360
            x1 = -rho * math.cos(math.radians(270 - azimuth))
            y1 = -rho * math.sin(math.radians(270 - azimuth))

        self._az_line.set_data([x0, x0 + x1], [y0, y0 + y1])

    def _get_azimuth_from_cartesian(self, x, y):
        """
        Return the azimuth (in degrees) from North of point (x, y), where the
        radar is at (0, 0).

        Parameters
        ----------
        x: float
            Cartesian coordinate in m.
        y: float
            Cartesian coordinate in m.

        Returns
        -------
        theta: float
            Azimuth (in degrees) from North.

        """

        x -= self.shift[0]
        y -= self.shift[1]

        if x < 0:
            theta = 270 - math.degrees(math.atan(y/x))
        else:
            theta = 90 - math.degrees(math.atan(y/x))

        print(theta)
        return theta

    def _onclick(self, event):
        """ Handle onclick events. """

        if event.button == 1 and (event.inaxes is self._ax_ppi):
            if self._sel_point:
                x = event.xdata*1e3
                y = event.ydata*1e3

                theta = self._get_azimuth_from_cartesian(x, y)
                self._set_azimuth_line_data(theta)

                # print(x, y, theta)
                x_lims = self._ax_rhi.get_xlim()
                y_lims = self._ax_rhi.get_ylim()
                self._ax_rhi.clear()
                self.display.plot_azimuth_to_rhi(self.field, theta,
                                                 vmin=-25, vmax=75,
                                                 fig=self._fig_rhi,
                                                 ax=self._ax_rhi,
                                                 title_flag=False,
                                                 colorbar_flag=False,
                                                 axislabels_flag=False,
                                                 cmap=pyart.graph.cm.NWSRef,
                                                 gatefilter=self.gatefilter)

                self._ax_rhi.plot([self._radius, self._radius],
                                 [self._ax_rhi.get_ylim()[0],
                                  self._ax_rhi.get_ylim()[-1]], '--k')

                self._ax_rhi.plot([self._radius + 5, self._radius + 5],
                                 [self._ax_rhi.get_ylim()[0],
                                  self._ax_rhi.get_ylim()[-1]], '--k')

                self._ax_rhi.plot([self._radius - 5, self._radius - 5],
                                 [self._ax_rhi.get_ylim()[0],
                                  self._ax_rhi.get_ylim()[-1]], '--k')

                self._ax_rhi.set_xlim(x_lims)
                self._ax_rhi.set_ylim(y_lims)

                self._fig_rhi.canvas.draw()
                self._fig_ppi.canvas.draw()

        else:
            return True

    def _onkeypress(self, event):
        """ Handle onkeypress events. """

        if event.key == 'a':
            self._sel_point = True
        elif event.key == 'l':
            self._sel_line = True

    def _onkeyrelease(self, event):
        """ Handle onkeyrelease events. """

        if event.key == 'a':
            self._sel_point = False
        elif event.key == 'l':
            self._sel_line = False


class LMAPlotter(object):
    def __init__(self, lma_file, charge=False, shift=(0, 0)):
        # The shift variable is used to match the RadarPlotter shift variable.
        # In the RadarPlotter, the shift moves the radar (0, 0) to
        # (shift[0], shift[1]), making the desired position as (0, 0).
        # In this application, we want to make the LMAPlotter (0, 0) match
        # the RadarPlotter coordinates when the radar is at (0, 0) and thus,
        # the desired position needs to be at (-shift[0], -shift[1]).
        self.shift = shift  #-shift[0], -shift[1]

        if not isinstance(lma_file, lma.LMAFile):
            if not charge:
                lma_file = lma.LMAFile(lma_file, shift=self.shift)
            else:
                lma_file = lma.XLMAExportedFile(lma_file, shift=self.shift)

        self.raw_data = lma_file.data
        self.filtered_data = self.raw_data

        self.cmap = cm.jet
        self.coloring = 'time'
        self.synced = False

        self.plot_data = {}
        self.plot_data_stack = []
        self.plot_x_stack = []
        self.plot_y_stack = []

        # Filter the data to default values
        # self.fix_charge()
        self.init_data()
        self.filter_rc2()
        self.filter_num_stations()
        self.filter_alt()

        # Reset all default matplotlib figure keymaps
        mpl.rcParams['keymap.fullscreen'] = ''
        mpl.rcParams['keymap.back'] = ''
        mpl.rcParams['keymap.forward'] = ''
        mpl.rcParams['keymap.home'] = ''
        mpl.rcParams['keymap.zoom'] = ''

    def fix_charge(self):
        for s in self.filtered_data:
            # For coloring purposes, creates an array of RGBA values arrays
            if s.charge == 3:
                s.charge = np.array([1.0, 0.0, 0.0, 1.0])  # RGBA for red
            elif s.charge == 0:
                s.charge = np.array([0.0, 1.0, 0.0, 1.0])  # RGBA for green
            elif s.charge == -3:
                s.charge = np.array([0.0, 0.0, 1.0, 1.0])  # RGBA for blue

    def filter_rc2(self, rc2=5.0):
        """
        Filters the data to only show the points whose solution has the
        specified reduced chi squared value
        :param rc2:
        :return:
        """

        # Filter the data
        self.filtered_data = [s for s in self.filtered_data if s.rc2 <= rc2]

        # Update the plot data
        self.update_data()

    def filter_num_stations(self, num_stations=5.0):
        """
        Filters the data to only show the points whose solution is given by
        the specified number of stations.

        :param num_stations: number of stations that solutions must satisfy
        :return:
        """

        # Filter the data
        self.filtered_data = [s for s in self.filtered_data if
                              s.num_stations >= num_stations]

        # Update the plot data
        self.update_data()

    def filter_alt(self, alt=20E3):
        """
        Filters the data to only show the points that are below the specified
        altitude

        :param alt: maximum altitude for data
        :return:
        """

        # Filter the data
        self.filtered_data = [s for s in self.filtered_data if
                              s.xyz_coords[2] <= alt]

        # Update the plot data
        self.update_data()

    def filter_xy(self, xlims=(-20.0E3, 20.0E3), ylims=(-20.0E3, 20.0E3)):
        """
        Filters the data to only show the points that are within the specified
        limits xlims, ylims.

        :param xlims: a list with the limits for the x-axis
        :param ylims: a list with the limist for the y-axis
        :return:
        """
        # Get the order for xlims and ylims to be ascending
        xmin = min(xlims)
        xmax = max(xlims)
        xlims = [xmin, xmax]

        ymin = min(ylims)
        ymax = max(ylims)
        ylims = [ymin, ymax]

        # Filter the x axis
        self.filtered_data = [s for s in self.filtered_data if
                              s.xyz_coords[0] >= xlims[0] + self.shift[0]]

        self.filtered_data = [s for s in self.filtered_data if
                              s.xyz_coords[0] <= xlims[1] + self.shift[0]]

        # Filter the y axis
        self.filtered_data = [s for s in self.filtered_data if
                              s.xyz_coords[1] >= ylims[0] + self.shift[1]]

        self.filtered_data = [s for s in self.filtered_data if
                              s.xyz_coords[1] <= ylims[1] + self.shift[1]]

        # Update all other variables
        self.update_data()

    def filter_time(self, tlims):
        """
        Filters the data to only show the points that are within the specified
        time limits tlims.

        :param time: a list with the time limits as strings in the format
                     HH:MM:SS.SSSSSS
        :return:
        """
        # Convert the time limits to timedelta objects
        t0 = datetime.datetime.strptime(tlims[0], '%H:%M:%S.%f')
        dt0 = datetime.timedelta(hours=t0.hour, minutes=t0.minute,
                                 seconds=t0.second,
                                 microseconds=t0.microsecond)

        t1 = datetime.datetime.strptime(tlims[1], '%H:%M:%S.%f')
        dt1 = datetime.timedelta(hours=t1.hour, minutes=t1.minute,
                                 seconds=t1.second,
                                 microseconds=t1.microsecond)

        # Filter the data
        self.filtered_data = [s for s in self.filtered_data if
                              s.seconds_of_day >= dt0.total_seconds()]

        self.filtered_data = [s for s in self.filtered_data if
                              s.seconds_of_day <= dt1.total_seconds()]

        # Update all other variables
        self.update_data()

    def init_data(self):
        self.plot_data['t'] = np.array([s.time for s in self.filtered_data])
        self.plot_data['x'] = np.array([s.xyz_coords[0] for s in
                                        self.filtered_data])
        self.plot_data['y'] = np.array([s.xyz_coords[1] for s in
                                        self.filtered_data])
        self.plot_data['z'] = np.array([s.xyz_coords[2] for s in
                                        self.filtered_data])
        self.plot_data['seconds_of_day'] = np.array([s.seconds_of_day for s in
                                                     self.filtered_data])
        self.plot_data['charge'] = np.array([s.charge for s in
                                             self.filtered_data])

    def update_data(self):
        self.plot_data['t'] = np.array([s.time for s in self.filtered_data])
        self.plot_data['x'] = np.array([s.xyz_coords[0] for s in
                                        self.filtered_data])
        self.plot_data['y'] = np.array([s.xyz_coords[1] for s in
                                        self.filtered_data])
        self.plot_data['z'] = np.array([s.xyz_coords[2] for s in
                                        self.filtered_data])
        self.plot_data['seconds_of_day'] = np.array([s.seconds_of_day for s in
                                                     self.filtered_data])
        self.plot_data['charge'] = np.array([s.charge for s in
                                             self.filtered_data])

        # print('t shape', self.plot_data['t'].shape)
        # print('x shape', self.plot_data['x'].shape)
        # print('y shape', self.plot_data['y'].shape)
        # print('z shape', self.plot_data['z'].shape)
        # print('secs shape', self.plot_data['seconds_of_day'].shape)
        # print(' ')

    def scale_data(self, mult=1):
        self.plot_data['x'] *= mult
        self.plot_data['z'] *= mult
        self.plot_data['y'] *= mult

    def set_cmap(self, cmap):
        if cmap == 'jet':
            self.cmap = cm.jet
        elif cmap == 'grey':
            self.cmap = cm.gray

    def set_coloring(self, coloring='time'):
        if coloring == 'charge':
            self.coloring = coloring

        else:
            self.coloring = coloring

    def reset_filters(self):
        """
        Resets the data to the unfiltered raw data.
        :return:
        """
        self.filtered_data = self.raw_data
        self.plot_data = {}

    def sort_time(self):
        """
        Sorts all the plot_data arrays by time in ascending order
        :return:
        """
        indices = np.argsort(self.plot_data['seconds_of_day'])

        self.plot_data['t'] = self.plot_data['t'][indices]
        self.plot_data['x'] = self.plot_data['x'][indices]
        self.plot_data['y'] = self.plot_data['y'][indices]
        self.plot_data['z'] = self.plot_data['z'][indices]
        self.plot_data['seconds_of_day'] = self.plot_data[
                                                     'seconds_of_day'][indices]
        self.plot_data['charge'] = self.plot_data['charge'][indices]

    def alt_histogram(self):
        h = self.plot_data['z']
        bins = np.arange(np.min(h), np.max(h), 100)
        hist, bin_edges = np.histogram(h, bins)
        bin_centers = 0.5 * (bin_edges[:-1] + bin_edges[1:])

        return hist, bin_centers, len(h)

    @staticmethod
    def date_format_major(x, pos=None):
        x = dates.num2date(x)

        if pos == 0 or pos == -1:
            fmt = '%H:%M:%S.%f'

        else:
            fmt = ':%S.%f'

        label = x.strftime(fmt)
        ind_dot = label.find('.')
        label = label[:ind_dot+5]
        label = label.rstrip('0')
        label = label.rstrip('.')

        return label

    @staticmethod
    def date_format_minor(x, pos=None):
        x = dates.num2date(x)

        fmt = ':%S.%f'

        label = x.strftime(fmt)
        ind_dot = label.find('.')
        label = label[:ind_dot+5]
        label = label.rstrip('0')
        label = label.rstrip('.')

        return label

    def get_eng_units(self, number):
        """
        Returns the factor and label of the precision of the number passed
        in engineering units. This is useful when modifying plot axis labels.

        Say you have a time array (units of seconds) and you are plotting
        only some fraction of that time. You don't want the axis ticks to be
        0.00XX but instead XX. Then you would use this and multiply your time
        array by 1/factor returned by this function.

        :param number: Number to be converted into engineering units
        :return: a tuple with the factor to convert the number into
                 engineering units and the text label for those units
        """
        units = {
            -12: 1E-12,  # pico
            -9: 1E-9,    # nano
            -6: 1E-6,    # micro
            -3: 1E-3,    # milli
             0: 1,       # unity
             3: 1E3,     # kilo
             6: 1E6}     # mega

        labels = {
            -12: 'p',
            -9: 'n',
            -6: '$\mu$',
            -3: 'm',
             0: '',
             3: 'k',
             6: 'M'
        }

        if number != 0:
            pow10 = int(math.floor(math.log10(number) / 3) * 3)
        else:
            pow10 = 0

        pow10 = min(pow10, max(units.keys()))
        pow10 = max(pow10, min(units.keys()))

        return units[pow10], labels[pow10]

    @staticmethod
    def get_date_format_major(time, padding=5e-3):
        """
        Return major and minor ticklabels for time axes. This returns the
        appropriate labels for a graph of the form 'Time after: X UTC (ms)'
        """
        # # Get delta t from passed time array and get the oritingal
        # # initial and final times
        # dt = np.diff(time)
        # t0 = time[0]
        # tn = time[-1]
        # tp = datetime.timedelta(microseconds=padding*1e6)
        #
        # # Setup new time array with padding on both ends and make t0 be the
        # # zero point to the array now spans from -tp to tn + tp
        # n = int((tn - t0 + 2 * tp) / dt)
        # ts = t0 - tp
        # time = np.array([ts + i * dt for i in range(n)])
        # time -= t0
        #
        # # Get the tick values
        # maj_ticks = list(time[time % 10 == 0])
        # min_ticks = list(time[time % 2.5 == 0])

        # Get total time span in time array in ms
        tend = (time[-1] - time[0]).total_seconds()
        tend *= 1E3
        # Major ticks will occur every 10 ms, minor ticks every 5 ms
        dt_maj = 10
        dt_min = 5

        # Empty lists to hold ticks
        maj_ticks = []
        min_ticks = []

        for i in range(int(tend)):
            if i % dt_maj == 0:
                maj_ticks.append(str(i))
            elif i % dt_min == 0:
                min_ticks.append(str(i))

        return maj_ticks, min_ticks

    def get_plot_data(self, x, y, x_old, x_new, y_old, y_new):
        """
        Gets the data for the current plot
        :param x: entire data for x
        :param y: entire data for y
        :param x_old: old limits
        :param x_new: new limits
        :param y_old: old limits
        :param y_new: new limits
        :return:
        """
        temp_x = x
        temp_y = y
        temp_t = self.plot_data['t']
        temp_charge = self.plot_data['charge']

        if x_old is not None:
            # Sort by x and get old x limits
            temp_t = temp_t[np.argsort(temp_x)]
            temp_y = temp_y[np.argsort(temp_x)]
            temp_charge = temp_charge[np.argsort(temp_x)]
            temp_x = temp_x[np.argsort(temp_x)]

            indmin, indmax = np.searchsorted(temp_x, x_old)
            indmax = min(len(temp_x)-1, indmax)

            temp_x = temp_x[indmin:indmax]
            temp_y = temp_y[indmin:indmax]
            temp_t = temp_t[indmin:indmax]
            temp_charge = temp_charge[indmin:indmax]

            # Sort by y and get old y limits
            temp_t = temp_t[np.argsort(temp_y)]
            temp_x = temp_x[np.argsort(temp_y)]
            temp_charge = temp_charge[np.argsort(temp_y)]
            temp_y = temp_y[np.argsort(temp_y)]

            indmin, indmax = np.searchsorted(temp_y, (y_old[0], y_old[1]))
            indmax = min(len(temp_y)-1, indmax)

            temp_x = temp_x[indmin:indmax]
            temp_y = temp_y[indmin:indmax]
            temp_t = temp_t[indmin:indmax]
            temp_charge = temp_charge[indmin:indmax]

        # Sort by x and get new  x limits
        temp_t = temp_t[np.argsort(temp_x)]
        temp_y = temp_y[np.argsort(temp_x)]
        temp_charge = temp_charge[np.argsort(temp_x)]
        temp_x = temp_x[np.argsort(temp_x)]

        indmin, indmax = np.searchsorted(temp_x, x_new)
        indmax = min(len(temp_x)-1, indmax)

        temp_x = temp_x[indmin:indmax]
        temp_y = temp_y[indmin:indmax]
        temp_t = temp_t[indmin:indmax]
        temp_charge = temp_charge[indmin:indmax]

        # Sort by y and get new y limits
        temp_t = temp_t[np.argsort(temp_y)]
        temp_x = temp_x[np.argsort(temp_y)]
        temp_charge = temp_charge[np.argsort(temp_y)]
        temp_y = temp_y[np.argsort(temp_y)]

        indmin, indmax = np.searchsorted(temp_y, (y_new[0], y_new[1]))
        indmax = min(len(temp_y)-1, indmax)

        temp_x = temp_x[indmin:indmax]
        temp_y = temp_y[indmin:indmax]
        temp_t = temp_t[indmin:indmax]
        temp_charge = temp_charge[indmin:indmax]

        # If the x axis corresponds to time (such as in alt_t plots), then
        # convert to the appropriate numbers so that the DateFormatter from
        # the axis can represent the values correctly
        try:
            if isinstance(temp_x[0], datetime.datetime):
                for i in range(len(temp_x)):
                    temp_x[i] = dates.date2num(temp_x[i])

        except IndexError:
            raise

        # Sort by time one last time
        temp_y = temp_y[np.argsort(temp_t)]
        temp_x = temp_x[np.argsort(temp_t)]
        temp_charge = temp_charge[np.argsort(temp_t)]
        temp_t = temp_t[np.argsort(temp_t)]

        return temp_x, temp_y, temp_t, temp_charge

    def plot_alt_t(self, lims=(0, 20e3), ax=None):
        self.alt_t_x_stack = []
        self.alt_t_y_stack = []

        lims = [lims[0]*1e-3, lims[-1]*1e-3]

        if ax is None:
            self.fig_alt_t = plt.figure()
            self.ax_alt_t = self.fig_alt_t.add_subplot(111)
        else:
            self.ax_alt_t = ax
            self.fig_alt_t = ax.get_figure()

        if self.coloring == 'time':
            colors = self.cmap(np.linspace(0, 1, len(self.plot_data['t'])))
            norm = None
            cmap = self.cmap
        elif self.coloring == 'charge':
            colors = self.plot_data['charge']
            cmap = mpl.colors.ListedColormap(['blue', 'green', 'red'])
            bounds = [-3, -1, 0, 1, 3]
            norm = mpl.colors.BoundaryNorm(bounds, cmap.N)

        self.scat_alt_t = self.ax_alt_t.scatter(self.plot_data['t'],
                                                self.plot_data['z']*1E-3,
                                                marker='.', c=colors,
                                                cmap=cmap, norm=norm,
                                                s=30, lw=0)

        self.ax_alt_t.set_ylabel('Altitude (km)')
        self.ax_alt_t.set_xlabel('Time (s)')

        self.ax_alt_t.set_ylim(lims)
        self.ax_alt_t.set_xlim([self.plot_data['t'][0],
                                self.plot_data['t'][-1]])

        self.ax_alt_t.xaxis.set_minor_locator(mpl.ticker.AutoMinorLocator(2))
        self.ax_alt_t.xaxis.set_minor_formatter(
                              mpl.ticker.FuncFormatter(self.date_format_minor))

        self.ax_alt_t.xaxis.set_major_locator(mpl.ticker.LinearLocator(5))
        self.ax_alt_t.xaxis.set_major_formatter(
                              mpl.ticker.FuncFormatter(self.date_format_major))

        # for label in self.ax_alt_t.xaxis.get_ticklabels(minor=True):
        #     label.set_rotation(30)
        #
        # for label in self.ax_alt_t.xaxis.get_ticklabels(minor=False):
        #     label.set_rotation(30)

        # Define event handlers
        self.span_alt_t = SpanSelector(self.ax_alt_t, self._onselect_alt_t,
                                       'horizontal', useblit=True,
                                       rectprops=dict(alpha=0.2,
                                                      facecolor='red'))
        self.span_alt_t_v = SpanSelector(self.ax_alt_t, self._onselect_alt_t_v,
                                         'vertical', useblit=True,
                                         rectprops=dict(alpha=0.2,
                                                        facecolor='red'))

        self.span_alt_t_v.visible = False

        self.cid_alt_t = self.fig_alt_t.canvas.mpl_connect(
                                                    'button_release_event',
                                                    self._onclick_alt_t)

        self.kp_alt_t = self.fig_alt_t.canvas.mpl_connect(
                                                        'key_press_event',
                                                        self._onkeypress_alt_t)

        self.kr_alt_t = self.fig_alt_t.canvas.mpl_connect(
                                                      'key_release_event',
                                                      self._onkeyrelease_alt_t)

    def _onselect_alt_t(self, xmin, xmax):
        if xmin == xmax:
            return True

        # Epoch time, used for num2date
        t = datetime.datetime(1970, 1, 1)

        # Save the current graph's limits
        xmin_old = self.ax_alt_t.get_xlim()[0]
        xmax_old = self.ax_alt_t.get_xlim()[1]

        ymin_old = self.ax_alt_t.get_ylim()[0]
        ymax_old = self.ax_alt_t.get_ylim()[1]

        # Convert xmin_old to datetime
        a = dates.num2date(xmin_old)
        xmin_old = datetime.datetime(a.year, a.month, a.day, a.hour, a.minute,
                                     a.second, a.microsecond)

        # Convert xmax_old to datetime
        a = dates.num2date(xmax_old)
        xmax_old = datetime.datetime(a.year, a.month, a.day, a.hour, a.minute,
                                     a.second, a.microsecond)

        # Get new limits and redraw
        # Convert xmin to datetime
        a = dates.num2date(xmin)
        xmin = datetime.datetime(a.year, a.month, a.day, a.hour, a.minute,
                                 a.second, a.microsecond)

        # Convert xmax to datetime
        a = dates.num2date(xmax)
        xmax = datetime.datetime(a.year, a.month, a.day, a.hour, a.minute,
                                 a.second, a.microsecond)

        try:
            if not self.alt_t_x_stack:
                thisx, thisy, thist, thischarge = self.get_plot_data(
                                      self.plot_data['t'], self.plot_data['z'],
                                      None, [xmin, xmax], None, [ymin_old*1e3,
                                                                 ymax_old*1e3])
            else:
                thisx, thisy, thist, thischarge = self.get_plot_data(
                                      self.plot_data['t'], self.plot_data['z'],
                                      self.alt_t_x_stack[-1], [xmin, xmax],
                                      [self.alt_t_y_stack[-1][0]*1e3,
                                       self.alt_t_y_stack[-1][1]*1e3],
                                      [ymin_old*1e3, ymax_old*1e3])

        except IndexError:
            return True

        self.update_graph_alt_t(thisx, thisy, thist, thischarge)

        # Append values to stack
        self.alt_t_x_stack.append([xmin_old, xmax_old])
        self.alt_t_y_stack.append([ymin_old, ymax_old])

        # Re-draw figure
        self.fig_alt_t.canvas.draw()

    def _onselect_alt_t_v(self, ymin, ymax):
        if ymin == ymax:
            return True

        # Save the current graph's limits
        xmin_old = self.ax_alt_t.get_xlim()[0]
        xmax_old = self.ax_alt_t.get_xlim()[1]

        ymin_old = self.ax_alt_t.get_ylim()[0]
        ymax_old = self.ax_alt_t.get_ylim()[1]

        # Convert xmin_old to datetime
        a = dates.num2date(xmin_old)
        xmin_old = datetime.datetime(a.year, a.month, a.day, a.hour, a.minute,
            a.second, a.microsecond)

        # Convert xmax_old to datetime
        a = dates.num2date(xmax_old)
        xmax_old = datetime.datetime(a.year, a.month, a.day, a.hour, a.minute,
                                     a.second, a.microsecond)

        try:
            if not self.alt_t_x_stack:
                thisx, thisy, thist, thischarge = self.get_plot_data(
                                      self.plot_data['t'], self.plot_data['z'],
                                      None, [xmin_old, xmax_old], None,
                                      [ymin*1e3, ymax*1e3])
            else:
                thisx, thisy, thist, thischarge = self.get_plot_data(
                                      self.plot_data['t'], self.plot_data['z'],
                                      self.alt_t_x_stack[-1], [xmin_old,
                                                              xmax_old],
                                      [self.alt_t_y_stack[-1][0]*1e3,
                                       self.alt_t_y_stack[-1][1]*1e3],
                                      [ymin*1e3, ymax*1e3])

        except IndexError:
            return True

        self.update_graph_alt_t(thisx, thisy, thist, thischarge)

        # Append values to stack
        self.alt_t_x_stack.append([xmin_old, xmax_old])
        self.alt_t_y_stack.append([ymin_old, ymax_old])

        # Re-draw figure
        self.fig_alt_t.canvas.draw()

    def _onclick_alt_t(self, event):
        if event.button == 3 and (event.inaxes is self.ax_alt_t or
                                  self.synced):

            if self.alt_t_x_stack:

                thisx, thisy, thist, thischarge = self.get_plot_data(
                                      self.plot_data['t'], self.plot_data['z'],
                                      self.alt_t_x_stack[-1],
                                      self.alt_t_x_stack[-1],
                                      [self.alt_t_y_stack[-1][0]*1e3,
                                       self.alt_t_y_stack[-1][1]*1e3],
                                      [self.alt_t_y_stack[-1][0]*1e3,
                                       self.alt_t_y_stack[-1][1]*1e3])

                self.update_graph_alt_t(thisx, thisy, thist, thischarge)

                self.alt_t_x_stack = self.alt_t_x_stack[:-1]

                if self.alt_t_y_stack:
                    self.alt_t_y_stack = self.alt_t_y_stack[:-1]

                self.fig_alt_t.canvas.draw()

    def _onkeypress_alt_t(self, event):
        if event.key == 'r':
            if self.alt_t_x_stack:

                thisx, thisy, thist, thischarge = self.get_plot_data(
                                      self.plot_data['t'], self.plot_data['z'],
                                      self.alt_t_x_stack[0],
                                      self.alt_t_x_stack[0],
                                      [self.alt_t_y_stack[0][0]*1e3,
                                       self.alt_t_y_stack[0][1]*1e3],
                                      [self.alt_t_y_stack[0][0]*1e3,
                                       self.alt_t_y_stack[0][1]*1e3])

                self.update_graph_alt_t(thisx, thisy, thist, thischarge)

                self.alt_t_x_stack = []
                self.alt_t_y_stack = []

                self.fig_alt_t.canvas.draw()

        elif event.key == 'y':
            self.span_alt_t.visible = False
            self.span_alt_t_v.visible = True

        elif event.key == ' ' or event.key == 'escape':
            plt.close(self.fig_alt_t)

    def _onkeyrelease_alt_t(self, event):
        if event.key == 'y':
            self.span_alt_t.visible = True
            self.span_alt_t_v.visible = False

    def update_graph_alt_t(self, thisx, thisy, thist, thischarge):
        thisy *= 1e-3

        data = np.hstack((thisx[:, np.newaxis], thisy[:, np.newaxis]))
        # thischarge = thischarge[:, np.newaxis]

        self.ax_alt_t.clear()
        if self.coloring == 'time':
            colors = self.cmap(np.linspace(0, 1, len(thist)))
            norm = None
            cmap = self.cmap
        elif self.coloring == 'charge':
            colors = thischarge
            cmap = mpl.colors.ListedColormap(['blue', 'green', 'red'])
            bounds = [-3, -1, 0, 1, 3]
            norm = mpl.colors.BoundaryNorm(bounds, cmap.N)

        self.ax_alt_t.scatter(thisx, thisy, marker='.', c=colors, cmap=cmap,
                              norm=norm, s=30, lw=0)

        # self.scat_alt_t.set_offsets(data)
        #
        # if self.coloring == 'time':
        #     colors = self.cmap(np.linspace(0, 1, len(thist)))
        # elif self.coloring == 'charge':
        #     colors = thischarge
        #
        # self.scat_alt_t.set_color(colors)



        max_y = -np.inf
        min_y = np.inf

        mx_y = np.max(thisy)
        mn_y = np.min(thisy)

        if mx_y > max_y:
            max_y = mx_y

        if mn_y < min_y:
            min_y = mn_y

        max_y = max_y + (max_y - min_y)*.1

        max_x = -np.inf
        min_x = np.inf

        mx_x = np.max(thisx)
        mn_x = np.min(thisx)

        if mx_x > max_x:
            max_x = mx_x

        if mn_x < min_x:
            min_x = mn_x

        max_x = max_x + (max_x - min_x)*.01
        min_x = min_x - (max_x - min_x)*.01

        # Set plot's limits
        self.ax_alt_t.set_ylim(min_y, max_y)
        self.ax_alt_t.set_xlim(min_x, max_x)

        self.ax_alt_t.xaxis.set_minor_locator(mpl.ticker.AutoMinorLocator(2))
        self.ax_alt_t.xaxis.set_minor_formatter(
                              mpl.ticker.FuncFormatter(self.date_format_minor))

        self.ax_alt_t.xaxis.set_major_locator(mpl.ticker.LinearLocator(5))
        self.ax_alt_t.xaxis.set_major_formatter(
                              mpl.ticker.FuncFormatter(self.date_format_major))

        # for label in self.ax_alt_t.xaxis.get_ticklabels(minor=True):
        #     label.set_rotation(30)
        #
        # for label in self.ax_alt_t.xaxis.get_ticklabels(minor=False):
        #     label.set_rotation(30)

    def plot_plan(self, ax=None, xlims=(-50E3, 50E3),
                  ylims=(-50E3, 50E3), c=None):
        self.plan_x_stack = []
        self.plan_y_stack = []

        if ax is None:
            self.fig_plan = plt.figure()
            self.ax_plan = self.fig_plan.add_subplot(111)

        else:
            self.fig_plan = ax.get_figure()
            self.ax_plan = ax

        if c is None:
            if self.coloring == 'charge':
                c = self.plot_data['charge']
                cmap = mpl.colors.ListedColormap(['blue', 'green', 'red'])
                bounds = [-3, -1, 0, 1, 3]
                norm = mpl.colors.BoundaryNorm(bounds, cmap.N)
            else:
                c = self.plot_data['seconds_of_day']
                cmap = self.cmap
                norm = None

            self.scat_plan = self.ax_plan.scatter(self.plot_data['x'],
                                                  self.plot_data['y'],
                                                  marker='.',
                                                  c=c,
                                                  cmap=cmap,
                                                  norm=norm, s=30, lw=0)
        else:
            self.scat_plan = self.ax_plan.scatter(self.plot_data['x'],
                                                  self.plot_data['y'],
                                                  marker='.',
                                                  c=c, s=30, lw=0)

        self.ax_plan.set_xlim(xlims)
        self.ax_plan.set_ylim(ylims)

        self.ax_plan.set_ylabel('South - North')
        self.ax_plan.set_xlabel('West - East')

        self.rect_sel_plan = RectangleSelector(self.ax_plan,
                                               self._onselect_plan,
                                               button=[1],
                                               drawtype='box',
                                               rectprops=dict(alpha=0.2,
                                                              edgecolor='black',
                                                              linewidth=2))

        self.cid_plan = self.fig_plan.canvas.mpl_connect(
                                                        'button_release_event',
                                                        self._onclick_plan)

        self.kp_plan = self.fig_plan.canvas.mpl_connect('key_press_event',
                                                        self._onkeypress_plan)

    def _onselect_plan(self, eclick, erelease):
        xmin_old = self.ax_plan.get_xlim()[0]
        xmax_old = self.ax_plan.get_xlim()[1]

        ymin_old = self.ax_plan.get_ylim()[0]
        ymax_old = self.ax_plan.get_ylim()[1]

        # print(self.plot_x_stack)
        # print(self.plot_y_stack)

        x_start = eclick.xdata
        y_start = eclick.ydata

        x_end = erelease.xdata
        y_end = erelease.ydata

        if x_start == x_end or y_start == y_end:
            return True

        xmin = np.min([x_start, x_end])
        xmax = np.max([x_start, x_end])

        ymin = np.min([y_start, y_end])
        ymax = np.max([y_start, y_end])

        if not self.plan_x_stack:
            thisx, thisy, thist, thischarge = self.get_plot_data(self.plot_data['x'], self.plot_data['y'], None, [xmin, xmax], None, [ymin, ymax])
        else:
            thisx, thisy, thist, thischarge = self.get_plot_data(self.plot_data['x'], self.plot_data['y'], self.plan_x_stack[-1], [xmin, xmax], self.plan_y_stack[-1], [ymin, ymax])

        self.update_graph_plan(thisx, thisy, thist, thischarge)

        self.plan_x_stack.append([xmin_old, xmax_old])
        self.plan_y_stack.append([ymin_old, ymax_old])

        # Re-draw figure
        self.fig_plan.canvas.draw()

    def _onclick_plan(self, event):
        if event.button == 3 and (event.inaxes is self.ax_plan or self.synced):

            # print(self.plot_x_stack)
            # print(self.plot_y_stack)
            if self.plan_x_stack:
                # Get old limits from stacks
                xmin = self.plan_x_stack[-1][0]
                xmax = self.plan_x_stack[-1][1]

                ymin = self.plan_y_stack[-1][0]
                ymax = self.plan_y_stack[-1][1]

                if not self.plan_x_stack:
                    thisx, thisy, thist, thischarge = self.get_plot_data(self.plot_data['x'], self.plot_data['y'], None, [xmin, xmax], None, [ymin, ymax])
                else:
                    thisx, thisy, thist, thischarge = self.get_plot_data(self.plot_data['x'], self.plot_data['y'], self.plan_x_stack[-1], [xmin, xmax], self.plan_y_stack[-1], [ymin, ymax])

                self.update_graph_plan(thisx, thisy, thist, thischarge)

                self.plan_x_stack = self.plan_x_stack[:-1]
                self.plan_y_stack = self.plan_y_stack[:-1]

                self.fig_plan.canvas.draw()

    def _onkeypress_plan(self, event):
        if event.key == 'r':
            if self.plan_x_stack:
                # Get initial limits from stacks
                xmin = self.plan_x_stack[0][0]
                xmax = self.plan_x_stack[0][1]

                ymin = self.plan_y_stack[0][0]
                ymax = self.plan_y_stack[0][1]

                if not self.plan_x_stack:
                    thisx, thisy, thist, thischarge = self.get_plot_data(self.plot_data['x'], self.plot_data['y'], None, [xmin, xmax], None, [ymin, ymax])
                else:
                    thisx, thisy, thist, thischarge = self.get_plot_data(self.plot_data['x'], self.plot_data['y'], self.plan_x_stack[-1], [xmin, xmax], self.plan_y_stack[-1], [ymin, ymax])

                self.update_graph_plan(thisx, thisy, thist, thischarge)

                self.plan_x_stack = []
                self.plan_y_stack = []

                self.fig_plan.canvas.draw()

        elif event.key == ' ' or event.key == 'escape':
            plt.close(self.fig_plan)

    def update_graph_plan(self, thisx, thisy, thist, thischarge):
        # data = np.hstack((thisx[:, np.newaxis], thisy[:, np.newaxis]))
        # self.scat_plan.set_offsets(data)
        #
        # if self.coloring == 'time':
        #     colors = self.cmap(np.linspace(0, 1, len(thist)))
        # elif self.coloring == 'charge':
        #     colors = thischarge
        #
        # self.scat_plan.set_color(colors)

        self.ax_plan.clear()

        if self.coloring == 'charge':
            c = thischarge
            cmap = mpl.colors.ListedColormap(['blue', 'green', 'red'])
            bounds = [-3, -1, 0, 1, 3]
            norm = mpl.colors.BoundaryNorm(bounds, cmap.N)
        else:
            c = self.cmap(np.linspace(0, 1, len(thist)))
            cmap = self.cmap
            norm = None

        self.ax_plan.scatter(thisx, thisy, marker='.', c=c, cmap=cmap,
                             norm=norm, s=30, lw=0)

        max_y = -np.inf
        min_y = np.inf

        mx_y = np.max(thisy)
        mn_y = np.min(thisy)

        if mx_y > max_y:
            max_y = mx_y

        if mn_y < min_y:
            min_y = mn_y

        max_y = max_y + (max_y - min_y)*.1

        max_x = -np.inf
        min_x = np.inf

        mx_x = np.max(thisx)
        mn_x = np.min(thisx)

        if mx_x > max_x:
            max_x = mx_x

        if mn_x < min_x:
            min_x = mn_x

        max_x = max_x + (max_x - min_x)*.1
        min_x = min_x - (max_x - min_x)*.1

        # Set plot's limits
        self.ax_plan.set_ylim(min_y, max_y)
        self.ax_plan.set_xlim(min_x, max_x)

    def plot_proj(self, projection='NS', lims=(-20E3, 20E3), zlims=(0, 20E3),
                  fig=None, ax=None):
        self.plot_x_stack = []
        self.plot_y_stack = []
        self.projection = projection

        if fig is None or ax is None:
            self.fig_proj = plt.figure()
            self.ax_proj = self.fig_proj.add_subplot(111)

        else:
            self.fig_proj = fig
            self.ax_proj = ax

        if self.projection == 'NS':
            # This is the yz-plane
            self.scat_proj = self.ax_proj.scatter(self.plot_data['y'],
                                 self.plot_data['z'], marker='.',
                                 c=self.plot_data['seconds_of_day'],
                                 cmap=self.cmap, s=30, lw=0)
            self.ax_proj.set_xlim(lims)
            self.ax_proj.set_ylim(zlims)
            self.ax_proj.set_xlabel('South - North')
            self.ax_proj.set_ylabel('Altitude (m)')

        elif self.projection == 'EW':
            # This is the xz-plane
            self.scat_proj = self.ax_proj.scatter(self.plot_data['x'],
                                 self.plot_data['z'], marker='.',
                                 c=self.plot_data['seconds_of_day'],
                                 cmap=self.cmap, s=30, lw=0)
            self.ax_proj.set_xlim(lims)
            self.ax_proj.set_ylim(zlims)
            self.ax_proj.set_xlabel('West - East')
            self.ax_proj.set_ylabel('Altitude (m)')

        else:
            plt.close(self.fig_proj)
            return True

        self.rect_sel_proj = RectangleSelector(self.ax_proj,
                                               self._onselect_proj,
                                               button=[1],
                                               drawtype='box',
                                               rectprops=dict(alpha=0.2,
                                                              facecolor='red',
                                                              edgecolor='red',
                                                              linewidth=2))

        self.cid_proj = self.fig_proj.canvas.mpl_connect(
                                                        'button_release_event',
                                                        self._onclick_proj)

        self.kp_proj = self.fig_proj.canvas.mpl_connect('key_press_event',
                                                        self._onkeypress_proj)

    def _onselect_proj(self, eclick, erelease):
        xmin_old = self.ax_proj.get_xlim()[0]
        xmax_old = self.ax_proj.get_xlim()[1]

        ymin_old = self.ax_proj.get_ylim()[0]
        ymax_old = self.ax_proj.get_ylim()[1]

        x_start = eclick.xdata
        y_start = eclick.ydata

        x_end = erelease.xdata
        y_end = erelease.ydata

        if x_start == x_end or y_start == y_end:
            return True

        xmin = np.min([x_start, x_end])
        xmax = np.max([x_start, x_end])

        ymin = np.min([y_start, y_end])
        ymax = np.max([y_start, y_end])

        temp_y = self.plot_data['z']

        if self.projection == 'NS':
            temp_x = self.plot_data['y']
        else:
            temp_x = self.plot_data['x']

        if not self.plot_x_stack:
            thisx, thisy, thist, thischarge = self.get_plot_data(self.plot_data['x'], self.plot_data['y'], None, [xmin, xmax], None, [ymin, ymax])
        else:
            thisx, thisy, thist, thischarge = self.get_plot_data(self.plot_data['x'], self.plot_data['y'], self.plot_x_stack[-1], [xmin, xmax], self.plot_y_stack[-1], [ymin, ymax])

        self.update_graph_proj(thisx, thisy, thist, thischarge)

        self.plot_x_stack.append([xmin_old, xmax_old])
        self.plot_y_stack.append([ymin_old, ymax_old])

        # Re-draw figure
        self.fig_proj.canvas.draw()

    def _onclick_proj(self, event):
        if event.button == 3 and (event.inaxes is self.ax_proj or self.synced):

            # print(self.plot_x_stack)
            # print(self.plot_y_stack)
            if self.plot_x_stack:
                # Get old limits from stacks
                xmin = self.plot_x_stack[-1][0]
                xmax = self.plot_x_stack[-1][1]

                ymin = self.plot_y_stack[-1][0]
                ymax = self.plot_y_stack[-1][1]

                # Set new limits and redraw
                temp_y = self.plot_data['z']

                if self.projection == 'NS':
                    temp_x = self.plot_data['y']
                else:
                    temp_x = self.plot_data['x']

                if not self.plot_x_stack:
                    thisx, thisy, thist, thischarge = self.get_plot_data(self.plot_data['x'], self.plot_data['y'], None, [xmin, xmax], None, [ymin, ymax])
                else:
                    thisx, thisy, thist, thischarge = self.get_plot_data(self.plot_data['x'], self.plot_data['y'], self.plot_x_stack[-1], [xmin, xmax], self.plot_y_stack[-1], [ymin, ymax])

                self.update_graph_proj(thisx, thisy, thist, thischarge)

                self.plot_x_stack = self.plot_x_stack[:-1]
                self.plot_y_stack = self.plot_y_stack[:-1]

                self.fig_proj.canvas.draw()

    def _onkeypress_proj(self, event):
        if event.key == 'r':
            if self.plot_x_stack:
                # Get initial limits from stacks
                xmin = self.plot_x_stack[0][0]
                xmax = self.plot_x_stack[0][1]

                ymin = self.plot_y_stack[0][0]
                ymax = self.plot_y_stack[0][1]

                # Set new limits and redraw
                temp_y = self.plot_data['z']

                if self.projection == 'NS':
                    temp_x = self.plot_data['y']
                else:
                    temp_x = self.plot_data['x']

                if not self.plot_x_stack:
                    thisx, thisy, thist, thischarge = self.get_plot_data(self.plot_data['x'], self.plot_data['y'], None, [xmin, xmax], None, [ymin, ymax])
                else:
                    thisx, thisy, thist, thischarge = self.get_plot_data(self.plot_data['x'], self.plot_data['y'], self.plot_x_stack[-1], [xmin, xmax], self.plot_y_stack[-1], [ymin, ymax])

                self.update_graph_proj(thisx, thisy, thist, thischarge)

                self.plot_x_stack = []
                self.plot_y_stack = []

                self.fig_proj.canvas.draw()

        elif event.key == ' ' or event.key == 'escape':
            plt.close(self.fig_proj)

    def update_graph_proj(self, thisx, thisy, thist, thischarge):
        data = np.hstack((thisx[:, np.newaxis], thisy[:, np.newaxis]))
        self.scat_proj.set_offsets(data)

        if self.coloring == 'time':
            colors = self.cmap(np.linspace(0, 1, len(thist)))
        elif self.coloring == 'charge':
            colors = thischarge

        self.scat_proj.set_color(colors)

        max_y = -np.inf
        min_y = np.inf

        mx_y = np.max(thisy)
        mn_y = np.min(thisy)

        if mx_y > max_y:
            max_y = mx_y

        if mn_y < min_y:
            min_y = mn_y

        max_y = max_y + (max_y - min_y)*.1

        max_x = -np.inf
        min_x = np.inf

        mx_x = np.max(thisx)
        mn_x = np.min(thisx)

        if mx_x > max_x:
            max_x = mx_x

        if mn_x < min_x:
            min_x = mn_x

        max_x = max_x + (max_x - min_x)*.1
        min_x = min_x - (max_x - min_x)*.1

        # Set plot's limits
        self.ax_proj.set_ylim(min_y, max_y)
        self.ax_proj.set_xlim(min_x, max_x)

    def plot_3D(self, xlims=(-20E3, 20E3), ylims=(-20E3, 20E3),
                zlims=(0, 20E3), projections=False, colorbar=False):
        self.fig_3d = plt.figure()
        self.ax_3d = self.fig_3d.add_subplot(111, projection='3d')

        xlims = np.array(xlims) * 1e-3
        ylims = np.array(ylims) * 1e-3
        zlims = np.array(zlims) * 1e-3

        if projections:
            self.ax_3d.plot(self.plot_data['x']*1e-3, self.plot_data['y']*1e-3,
                            linestyle='None', color='grey', marker='.',
                            markeredgewidth=0, alpha=0.1, zdir='z',
                            zs=zlims[0])
            self.ax_3d.plot(self.plot_data['x']*1e-3, self.plot_data['z']*1e-3,
                            linestyle='None', color='grey', marker='.',
                            markeredgewidth=0, alpha=0.1, zdir='y',
                            zs=ylims[-1])
            self.ax_3d.plot(self.plot_data['y']*1e-3, self.plot_data['z']*1e-3,
                            linestyle='None', color='grey', marker='.',
                            markeredgewidth=0, alpha=0.1, zdir='x',
                            zs=xlims[0])

        self.scat_3d = self.ax_3d.scatter(self.plot_data['x']*1e-3,
                                          self.plot_data['y']*1e-3,
                                          self.plot_data['z']*1e-3,
                                          marker='.',
                                          c=self.plot_data['seconds_of_day'],
                                          cmap=self.cmap, s=30, lw=0)

        self.ax_3d.set_xlim(xlims)
        self.ax_3d.set_ylim(ylims)
        self.ax_3d.set_zlim(zlims)

        self.ax_3d.set_xlabel('West - East (km)')
        self.ax_3d.set_ylabel('South - North (km)')
        self.ax_3d.set_zlabel('Altitude (km)')

        if colorbar:
            ticks_loc = [self.plot_data['seconds_of_day'][0],
                         self.plot_data['seconds_of_day'][int(len(self.plot_data['seconds_of_day'])/2)], self.plot_data['seconds_of_day'][-1]]
            cb = self.fig_3d.colorbar(self.scat_3d, orientation='vertical',
                                      ticks=ticks_loc)
            times = [self.plot_data['t'][0].strftime('%H:%M:%S.%f'),
                     self.plot_data['t'][int(len(self.plot_data['t'])/2)].strftime('%H:%M:%S.%f'),
                     self.plot_data['t'][-1].strftime('%H:%M:%S.%f')]
            cb.ax.set_yticklabels(times)

    def plot_all(self):
        # Setup figure and axes
        self.fig_all = plt.figure(figsize=(12, 12))
        self.gs = GridSpec(5, 4)
        self.gs.update(hspace=.5)

        self.ax_all_alt_t = plt.subplot(self.gs[0, :])
        self.ax_all_EW = plt.subplot(self.gs[1, :-1])
        self.ax_all_hist = plt.subplot(self.gs[1, -1])
        self.ax_all_plan = plt.subplot(self.gs[2:, :-1])
        self.ax_all_NS = plt.subplot(self.gs[2:, -1])

        alt_label = 'Altitude (km)'
        EW_label = 'West - East (km)'
        NS_label = 'South - North (km)'
        hist_label = '# Sources'
        t0_string = datetime.datetime.strftime(self.plot_data['t'][0],
                                               "%H:%M:%S.%f")
        time_label = 'Time after {0} (ms)'.format(t0_string)

        self.ax_all_alt_t.set_ylabel(alt_label)
        self.ax_all_alt_t.set_xlabel(time_label)
        # self.ax_all_alt_t.set_title('LMA Sources')
        self.ax_all_EW.set_ylabel(alt_label)
        self.ax_all_hist.set_xlabel(hist_label)
        self.ax_all_plan.set_ylabel(NS_label)
        self.ax_all_plan.set_xlabel(EW_label)
        self.ax_all_NS.set_xlabel(alt_label)

        # Set plotting options
        s = 30
        lw = 0
        marker = '.'

        if self.coloring == 'time':
            colors = self.cmap(np.linspace(0, 1, len(self.plot_data['t'])))
            norm = None
            cmap = self.cmap
        elif self.coloring == 'charge':
            colors = self.plot_data['charge']
            cmap = mpl.colors.ListedColormap(['blue', 'green', 'red'])
            bounds = [-3, -1, 0, 1, 3]
            norm = mpl.colors.BoundaryNorm(bounds, cmap.N)

        # START PLOTTING ON AXES
        # Altitude vs. time subplot
        time = self.plot_data['t'] - self.plot_data['t'][0]
        for i in range(len(time)):
            time[i] = float(time[i].total_seconds())*1e3

        self.scat_all_alt_t = self.ax_all_alt_t.scatter(
                                time,
                                self.plot_data['z']*1E-3,
                                marker=marker, c=colors,
                                cmap=cmap, s=s, lw=lw,
                                norm=norm)

        maj_t, min_t = self.get_date_format_major(self.plot_data['t'])

        max_maj = max(maj_t)
        max_min = max(min_t)

        # xlims = [-50, max(max_maj, max_min)+50]

        self.ax_all_alt_t.set_xticklabels(maj_t)
        self.ax_all_alt_t.set_xticklabels(min_t, minor=True)

        # self.ax_all_alt_t.set_xticks(maj_t)
        # self.ax_all_alt_t.set_xticks(min_t, minor=True)
        # self.ax_all_alt_t.set_xlim(xlims)

        # self.ax_all_alt_t.xaxis.set_minor_locator(mpl.ticker.AutoMinorLocator(2))
        # self.ax_all_alt_t.xaxis.set_minor_formatter(mpl.ticker.FuncFormatter(self.date_format_minor))
        #
        # self.ax_all_alt_t.xaxis.set_major_locator(mpl.ticker.LinearLocator(5))
        # self.ax_all_alt_t.xaxis.set_major_formatter(mpl.ticker.FuncFormatter(self.date_format_major))
        #
        # self.ax_all_alt_t.set_xlim([self.plot_data['t'][0],
        #                             self.plot_data['t'][-1]])

        self.ax_all_alt_t.set_ylim([np.min(self.plot_data['z']*1e-3) -
                                    np.std(self.plot_data['z']*1e-3),
                                    np.max(self.plot_data['z']*1e-3) +
                                    np.std(self.plot_data['z']*1e-3)])

        # Altitude vs. NS projection subplot
        self.scat_all_NS = self.ax_all_NS.scatter(self.plot_data['z']*1E-3,
                                 self.plot_data['y']*1E-3, marker=marker,
                                 c=colors, cmap=cmap, s=s, lw=lw, norm=norm)
        self.ax_all_NS.set_xlim([np.min(self.plot_data['z']*1e-3) -
                                 np.std(self.plot_data['z']*1e-3),
                                 np.max(self.plot_data['z']*1e-3) +
                                 np.std(self.plot_data['z']*1e-3)])
        self.ax_all_NS.set_ylim([np.min(self.plot_data['y'])*1e-3 -
                                 np.std(self.plot_data['y']*1e-3),
                                 np.max(self.plot_data['y']*1e-3) +
                                 np.std(self.plot_data['y']*1e-3)])

        # Altitude vs. EW projection subplot
        self.scat_all_EW = self.ax_all_EW.scatter(self.plot_data['x']*1E-3,
                                 self.plot_data['z']*1E-3, marker=marker,
                                 c=colors, cmap=cmap, s=s, lw=lw, norm=norm)
        self.ax_all_EW.set_ylim([np.min(self.plot_data['z']*1e-3) -
                                 np.std(self.plot_data['z']*1e-3),
                                 np.max(self.plot_data['z']*1e-3) +
                                 np.std(self.plot_data['z']*1e-3)])
        self.ax_all_EW.set_xlim([np.min(self.plot_data['x'])*1e-3 -
                                 np.std(self.plot_data['x'] * 1e-3),
                                 np.max(self.plot_data['x']*1e-3) +
                                 np.std(self.plot_data['x'] * 1e-3)])

        # Altitude vs. plan projection subplot
        self.scat_all_plan = self.ax_all_plan.scatter(self.plot_data['x']*1E-3,
                             self.plot_data['y']*1E-3, marker=marker,
                             c=colors, cmap=cmap, s=s, lw=lw, norm=norm)

        self.ax_all_plan.set_xlim([np.min(self.plot_data['x'])*1e-3 -
                                   np.std(self.plot_data['x'] * 1e-3),
                                   np.max(self.plot_data['x']*1e-3) +
                                   np.std(self.plot_data['x'] * 1e-3)])
        self.ax_all_plan.set_ylim([np.min(self.plot_data['y'])*1e-3 -
                                   np.std(self.plot_data['y']*1e-3),
                                   np.max(self.plot_data['y']*1e-3) +
                                   np.std(self.plot_data['y']*1e-3)])

        # Altitude histogram subplot
        hist, bin_centers, num_pts = self.alt_histogram()
        self.ax_all_hist.plot(hist, bin_centers*1e-3)
        h = self.plot_data['z']*1e-3
        # self.ax_all_hist.text(0.95, 0.5, '{0} pts'.format(num_pts),
        #                       transform=self.ax_all_hist.transAxes,
        #                       rotation='vertical',
        #                       verticalalignment='center')

        self.ax_all_hist.xaxis.set_major_formatter(mpl.ticker.NullFormatter())
        self.ax_all_hist.set_ylim([np.min(self.plot_data['z']*1e-3) -
                                   np.std(self.plot_data['z']*1e-3),
                                   np.max(self.plot_data['z']*1e-3) +
                                   np.std(self.plot_data['z']*1e-3)])

    def measure_area(self, ax):
        mpl.rcParams['keymap.zoom'] = 'o'
        ax = ax
        self.fig_area = ax.get_figure()

        ax.scatter(self.plot_data['x'],
                   self.plot_data['y'], marker='.',
                   c=self.plot_data['seconds_of_day'],
                   cmap=self.cmap, s=30, lw=0)

        lasso = LassoSelector(ax, self._onselect_measure_area)

        self.lasso = LassoSelect(lasso)

        self.kp_proj = self.fig_area.canvas.mpl_connect('key_press_event',
                                                        self._onkeypress_area)

    def _onselect_measure_area(self, verts):
        verts.append(verts[0])
        lines = np.hstack([verts, np.roll(verts, -1, axis=0)])
        area = 0.5 * abs(sum(x1*y2-x2*y1 for x1, y1, x2, y2 in lines))
        self.lasso.area = area

    def _onkeypress_area(self, event):
        if event.key == ' ' or event.key == 'escape':
            plt.close(self.fig_area)
        elif event.key == 'a':
            self.lasso.set_active(True)


def main():
    fig = plt.figure(figsize=(8, 6))
    ax = fig.add_subplot(111, axisbg='#FFFFCC')

    x = np.arange(0.0, 5.0, 0.01)
    y = np.sin(2*np.pi*x) + 0.5*np.random.randn(len(x))

    ax.scatter(x, y)
    ax.set_ylim(-2,2)
    ax.set_title('Press left mouse button and drag to test')
    
    p = Plot(fig, ax)
    p.plot()
    
    fig = plt.figure(figsize=(8, 6))
    ax = fig.add_subplot(111, axisbg='#FFFFCC')

    x = np.arange(0.0, 5.0, 0.01)
    y = np.sin(2*np.pi*x) + 0.5*np.random.randn(len(x))

    ax.plot(x, y, '-')
    ax.set_ylim(-2,2)
    ax.set_title('Press left mouse button and drag to test')
    
    p1 = Plot(fig, ax)
    p1.plot()

    plt.show()
    

if __name__ == "__main__":
    main()
